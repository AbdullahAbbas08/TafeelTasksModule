// <auto-generated />
using System;
using CommiteeAndMeetings.BLL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommiteeAndMeetings.BLL.Migrations
{
    [DbContext(typeof(MasarContext))]
    [Migration("20220601121326_changedatetype")]
    partial class changedatetype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.ComiteeTaskCategory", b =>
                {
                    b.Property<int>("ComiteeTaskCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("categoryNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComiteeTaskCategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("ComiteeTaskCategory", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeMember", b =>
                {
                    b.Property<int>("CommiteeMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommiteeMemberId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("UserId");

                    b.ToTable("CommiteeMembers", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeRole", b =>
                {
                    b.Property<int>("CommiteeRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommiteeRolesNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommiteeRolesNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsMangerRole")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeRoleId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CommiteeRoles", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeTaskMultiMission", b =>
                {
                    b.Property<int>("CommiteeTaskMultiMissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommiteeTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("state")
                        .HasColumnType("bit");

                    b.HasKey("CommiteeTaskMultiMissionId");

                    b.HasIndex("CommiteeTaskId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CommiteeTaskMultiMission", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommitteeMeetingSystemSetting", b =>
                {
                    b.Property<int>("SystemSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClientSide")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("SystemSettingCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SystemSettingCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemSettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemSettingId");

                    b.ToTable("CommitteeMeetingSystemSetting", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommitteeNotification", b =>
                {
                    b.Property<int>("CommitteeNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteeSavedAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteeTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingTopicId")
                        .HasColumnType("int");

                    b.Property<int?>("MinuteOfMeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TextAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommitteeNotificationId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CommiteeSavedAttachmentId");

                    b.HasIndex("CommiteeTaskId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("MeetingTopicId");

                    b.HasIndex("MinuteOfMeetingId");

                    b.HasIndex("SurveyId");

                    b.ToTable("CommitteeNotifications", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommitteeTaskAttachment", b =>
                {
                    b.Property<int>("CommitteeTaskAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CommiteeTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommitteeTaskAttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CommiteeTaskId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CommitteeTaskAttachment", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommitteeTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstColorHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondColorHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdColorHex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Themes", "Reports");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.UpdateTaskLog", b =>
                {
                    b.Property<int>("UpdateTaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CancelDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CommiteeTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UpdateTaskLogId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("UpdateTaskLog", "Committe");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UpdateTaskLog");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.UserTask", b =>
                {
                    b.Property<int>("UserTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommiteeTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTaskId");

                    b.HasIndex("CommiteeTaskId");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTasks", "Committe");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ActionNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ActionNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowCcemployees")
                        .HasColumnType("bit")
                        .HasColumnName("AllowCCEmployees");

                    b.Property<bool?>("AllowCcexternalOrganization")
                        .HasColumnType("bit")
                        .HasColumnName("AllowCCExternalOrganization");

                    b.Property<bool?>("AllowCcinternalOrganization")
                        .HasColumnType("bit")
                        .HasColumnName("AllowCCInternalOrganization");

                    b.Property<bool?>("AllowInCaseCctransactionInPreparation")
                        .HasColumnType("bit")
                        .HasColumnName("AllowInCaseCCTransactionInPreparation");

                    b.Property<bool?>("AllowMulti")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowToEmployees")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowToExternalOrganization")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowToInternalOrganization")
                        .HasColumnType("bit");

                    b.Property<int?>("DefaultCcrequiredActionId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultCCRequiredActionId");

                    b.Property<int?>("DefaultToRequiredActionId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasRecipient")
                        .HasColumnType("bit");

                    b.HasKey("ActionId");

                    b.HasIndex(new[] { "DefaultCcrequiredActionId" }, "IX_Actions_DefaultCCRequiredActionId");

                    b.HasIndex(new[] { "DefaultToRequiredActionId" }, "IX_Actions_DefaultToRequiredActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ActionReferralMode", b =>
                {
                    b.Property<int>("ActionReferralModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ActionReferralModeId");

                    b.HasIndex(new[] { "ActionId" }, "IX_ActionReferralMode_ActionId");

                    b.HasIndex(new[] { "TransactionTypeId" }, "IX_ActionReferralMode_TransactionTypeId");

                    b.ToTable("ActionReferralMode");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ActionRequiredAction", b =>
                {
                    b.Property<int>("ActionRequiredActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ActionRequiredActionId");

                    b.HasIndex(new[] { "ActionId" }, "IX_ActionRequiredActions_ActionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ActionRequiredActions_CreatedBy");

                    b.HasIndex(new[] { "RequiredActionId" }, "IX_ActionRequiredActions_RequiredActionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_ActionRequiredActions_UpdatedBy");

                    b.ToTable("ActionRequiredActions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AggregatedCounter", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Key");

                    b.ToTable("AggregatedCounter", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AllowedCountry", b =>
                {
                    b.Property<int>("AllowedCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AllowedCountryId");

                    b.HasIndex(new[] { "CountryId" }, "IX_AllowedCountries_CountryId");

                    b.ToTable("AllowedCountries");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Annotation", b =>
                {
                    b.Property<int>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnnotationScope")
                        .HasColumnType("bit");

                    b.Property<int>("AnnotationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Hight")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelegated")
                        .HasColumnType("bit");

                    b.Property<int>("NaturalPageWidth")
                        .HasColumnType("int");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferrerTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long?>("ReferrerTransactionId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Scale")
                        .HasColumnType("real");

                    b.Property<int?>("SignatureId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<float?>("X")
                        .HasColumnType("real");

                    b.Property<float?>("Y")
                        .HasColumnType("real");

                    b.HasKey("AnnotationId");

                    b.HasIndex(new[] { "AnnotationTypeId" }, "IX_Annotations_AnnotationTypeId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_Annotations_AttachmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Annotations_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_Annotations_DeletedBy");

                    b.HasIndex(new[] { "ReferrerTransactionActionId" }, "IX_Annotations_ReferrerTransactionActionId");

                    b.HasIndex(new[] { "ReferrerTransactionActionRecipientId" }, "IX_Annotations_ReferrerTransactionActionRecipientId");

                    b.HasIndex(new[] { "ReferrerTransactionId" }, "IX_Annotations_ReferrerTransactionId");

                    b.HasIndex(new[] { "SignatureId" }, "IX_Annotations_SignatureId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Annotations_UpdatedBy");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AnnotationSecurity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnotationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AnnotationId" }, "IX_AnnotationSecurities_AnnotationId");

                    b.HasIndex(new[] { "UserId" }, "IX_AnnotationSecurities_UserId");

                    b.ToTable("AnnotationSecurities");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AnnotationType", b =>
                {
                    b.Property<int>("AnnotationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnnotationTypeCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AnnotationTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AnnotationTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AnnotationTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateHtml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnnotationTypeId");

                    b.ToTable("AnnotationTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ArchiveReason", b =>
                {
                    b.Property<int>("ArchiveReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsForVip")
                        .HasColumnType("bit")
                        .HasColumnName("IsForVIP");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReasonCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchiveReasonId");

                    b.ToTable("ArchiveReason");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AssignmentComment", b =>
                {
                    b.Property<int>("AssignmentCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<long?>("AssignmentTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AssignmentCommentId");

                    b.HasIndex(new[] { "AssignmentTransactionId" }, "IX_AssignmentComments_AssignmentTransactionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_AssignmentComments_CreatedBy");

                    b.ToTable("AssignmentComments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LfentryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LFEntryId");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalAttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex(new[] { "AttachmentTypeId" }, "IX_Attachments_AttachmentTypeId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Attachments_CreatedBy");

                    b.HasIndex(new[] { "PhysicalAttachmentTypeId" }, "IX_Attachments_PhysicalAttachmentTypeId");

                    b.HasIndex(new[] { "ReferenceAttachmentId" }, "IX_Attachments_ReferenceAttachmentId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Attachments_UpdatedBy");

                    b.HasIndex(new[] { "AttachmentId", "PhysicalAttachmentTypeId", "AttachmentTypeId" }, "_dta_index_Attachments_11_1906105831__K1_K10_K3_2_4_5_6_7_8_11_12_13_17");

                    b.HasIndex(new[] { "AttachmentId", "AttachmentTypeId", "PhysicalAttachmentTypeId" }, "_dta_index_Attachments_11_1906105831__K1_K3_K10_2_4_5_6_7_8_11_12_13_17");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentStatus", b =>
                {
                    b.Property<int>("AttachmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentStatusCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentStatusNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentStatusNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentStatusId");

                    b.ToTable("AttachmentStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentTag", b =>
                {
                    b.Property<int>("AttachmentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentTagId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_AttachmentTags_AttachmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_AttachmentTags_CreatedBy");

                    b.HasIndex(new[] { "TagId" }, "IX_AttachmentTags_TagId");

                    b.ToTable("AttachmentTags");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentType", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentTypeCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentVersion", b =>
                {
                    b.Property<int>("AttachmentVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AttachmentVersionId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_AttachmentVersions_AttachmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_AttachmentVersions_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_AttachmentVersions_DeletedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_AttachmentVersions_UpdatedBy");

                    b.ToTable("AttachmentVersions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Audit", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForignKeys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IP");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditTrailId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IP");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditTrailId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AutoResetTransctionNumberPattern", b =>
                {
                    b.Property<int>("AutoResetTransctionNumberPatternId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoResetTransctionNumberPatternNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoResetTransctionNumberPatternNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoResetTransctionNumberPatternNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AutoResetTransctionNumberPatternId");

                    b.ToTable("AutoResetTransctionNumberPatterns");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("AttachmentInculdded")
                        .HasColumnType("bit");

                    b.Property<int?>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ChatMessageId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_ChatMessages_AttachmentId");

                    b.HasIndex(new[] { "ChatRoomId" }, "IX_ChatMessages_ChatRoomId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ChatMessages_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_ChatMessages_DeletedBy");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatMessageSeen", b =>
                {
                    b.Property<int>("ChatMessageSeenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatMessageId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ChatMessageSeenId");

                    b.HasIndex(new[] { "ChatMessageId" }, "IX_ChatMessageSeens_ChatMessageId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ChatMessageSeens_CreatedBy");

                    b.ToTable("ChatMessageSeens");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ChatRoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.Property<int?>("TicketClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("TicketReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<string>("TicketTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("ChatRoomId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ChatRooms_CreatedBy");

                    b.HasIndex(new[] { "TicketClassificationId" }, "IX_ChatRooms_TicketClassificationId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_ChatRooms_TransactionId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatRoomUser", b =>
                {
                    b.Property<int>("ChatRoomUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChatRoomUserId");

                    b.HasIndex(new[] { "ChatRoomId" }, "IX_ChatRoomUsers_ChatRoomId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ChatRoomUsers_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_ChatRoomUsers_DeletedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_ChatRoomUsers_UserId");

                    b.ToTable("ChatRoomUsers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassificationNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ClassificationNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ClassificationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReferenceRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumberNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ReferenceNumberNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ReferenceNumberNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassificationId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Classifications_CreatedBy");

                    b.HasIndex(new[] { "ParentClassificationId" }, "IX_Classifications_ParentClassificationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Classifications_UpdatedBy");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.CommonGroup", b =>
                {
                    b.Property<int>("CommonGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonGroupNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("CommonGroupNameAR");

                    b.Property<string>("CommonGroupNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("CommonGroupNameEN");

                    b.Property<string>("CommonGroupNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CommonGroupNameFN");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommonGroupId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_CommonGroups_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_CommonGroups_DeletedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_CommonGroups_UpdatedBy");

                    b.ToTable("CommonGroups");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.CommonGroupMember", b =>
                {
                    b.Property<int>("CommonGroupMembersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommonGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUser")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommonGroupMembersId");

                    b.HasIndex(new[] { "CommonGroupId" }, "IX_CommonGroupMembers_CommonGroupId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_CommonGroupMembers_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_CommonGroupMembers_OrganizationId");

                    b.HasIndex(new[] { "UserId" }, "IX_CommonGroupMembers_UserId");

                    b.ToTable("CommonGroupMembers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ConfidentialityLevel", b =>
                {
                    b.Property<int>("ConfidentialityLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.HasKey("ConfidentialityLevelId");

                    b.ToTable("ConfidentialityLevels");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Counter", b =>
                {
                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.ToTable("Counter", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Delegation", b =>
                {
                    b.Property<int>("DelegationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FollowUpOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("followUpOrganizationId");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DelegationId");

                    b.HasIndex(new[] { "ActionId" }, "IX_Delegations_ActionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Delegations_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Delegations_UpdatedBy");

                    b.ToTable("Delegations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DelegationReceipient", b =>
                {
                    b.Property<int>("DelegationReceipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int>("DelegationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("bit");

                    b.Property<int?>("UrgencyDaysCount")
                        .HasColumnType("int");

                    b.HasKey("DelegationReceipientId");

                    b.HasIndex(new[] { "CorrespondentUserId" }, "IX_DelegationReceipients_CorrespondentUserId");

                    b.HasIndex(new[] { "DelegationId" }, "IX_DelegationReceipients_DelegationId");

                    b.HasIndex(new[] { "DirectedToOrganizationId" }, "IX_DelegationReceipients_DirectedToOrganizationId");

                    b.HasIndex(new[] { "DirectedToUserId" }, "IX_DelegationReceipients_DirectedToUserId");

                    b.HasIndex(new[] { "RequiredActionId" }, "IX_DelegationReceipients_RequiredActionId");

                    b.ToTable("DelegationReceipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliveryCorrespondentTransaction", b =>
                {
                    b.Property<int>("DeliveryCorrespondentTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCorrespondentTransactionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SSN");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("WhoIsEmpSign")
                        .HasColumnType("int");

                    b.Property<string>("WhoIsExternalSign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryCorrespondentTransactionId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_DeliveryCorrespondentTransactions_AttachmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_DeliveryCorrespondentTransactions_CreatedBy");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_DeliveryCorrespondentTransactions_TransactionActionRecipientId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_DeliveryCorrespondentTransactions_UpdatedBy");

                    b.HasIndex(new[] { "WhoIsEmpSign" }, "IX_DeliveryCorrespondentTransactions_WhoIsEmpSign");

                    b.ToTable("DeliveryCorrespondentTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheet", b =>
                {
                    b.Property<int>("DeliverySheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliverySheetNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("DeliverySheetStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DeliverySheetId");

                    b.HasIndex(new[] { "CorrespondentUserId" }, "IX_DeliverySheets_CorrespondentUserId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_DeliverySheets_CreatedBy");

                    b.HasIndex(new[] { "DeliverySheetStatusId" }, "IX_DeliverySheets_DeliverySheetStatusId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_DeliverySheets_UpdatedBy");

                    b.ToTable("DeliverySheets");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheetAttachment", b =>
                {
                    b.Property<int>("DeliverySheetAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeliverySheetId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DeliverySheetAttachmentId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_DeliverySheetAttachments_AttachmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_DeliverySheetAttachments_CreatedBy");

                    b.HasIndex(new[] { "DeliverySheetId" }, "IX_DeliverySheetAttachments_DeliverySheetId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_DeliverySheetAttachments_UpdatedBy");

                    b.ToTable("DeliverySheetAttachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheetItem", b =>
                {
                    b.Property<int>("DeliverySheetItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliverySheetId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DeliverySheetItemId");

                    b.HasIndex(new[] { "DeliverySheetId" }, "IX_DeliverySheetItems_DeliverySheetId");

                    b.HasIndex(new[] { "DeliveryStatusId" }, "IX_DeliverySheetItems_DeliveryStatusId");

                    b.HasIndex(new[] { "DeliveryTypeId" }, "IX_DeliverySheetItems_DeliveryTypeId");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_DeliverySheetItems_TransactionActionRecipientId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_DeliverySheetItems_UpdatedBy");

                    b.ToTable("DeliverySheetItems");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliveryStatus", b =>
                {
                    b.Property<int>("DeliveryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryStatusCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DeliveryStatusNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DeliveryStatusNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DeliveryStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryStatusId");

                    b.ToTable("DeliveryStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliveryType", b =>
                {
                    b.Property<int>("DeliveryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DeliveryTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DeliveryTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryTypeId");

                    b.ToTable("DeliveryTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DictionaryWord", b =>
                {
                    b.Property<int>("DictionaryWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DictionaryWordId");

                    b.ToTable("DictionaryWords");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DirectionType", b =>
                {
                    b.Property<int>("DirectionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DirectionTypeCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DirectionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DirectionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DirectionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectionTypeId");

                    b.ToTable("DirectionTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ECMArchiving", b =>
                {
                    b.Property<int>("EcmarchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ECMArchiveId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FolderEntryId")
                        .HasColumnType("int")
                        .HasColumnName("FolderEntryID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EcmarchiveId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_ECMArchiving_OrganizationId");

                    b.HasIndex(new[] { "UserId" }, "IX_ECMArchiving_UserId");

                    b.ToTable("ECMArchiving");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.EcmarchivingPermission", b =>
                {
                    b.Property<int>("EcmarchivingPermitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ECMArchivingPermitionId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EcmarchivingId")
                        .HasColumnType("int")
                        .HasColumnName("ECMArchivingId");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("EcmarchivingPermitionId");

                    b.HasIndex(new[] { "EcmarchivingId" }, "IX_ECMArchivingPermissions_ECMArchivingId");

                    b.HasIndex(new[] { "PermissionId" }, "IX_ECMArchivingPermissions_PermissionId");

                    b.ToTable("ECMArchivingPermissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Ecmtemplate", b =>
                {
                    b.Property<int>("EcmtemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ECMTemplateId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EcmtemplateId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_ECMTemplate_OrganizationId");

                    b.HasIndex(new[] { "UserId" }, "IX_ECMTemplate_UserId");

                    b.ToTable("ECMTemplate");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.EmailTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionActionRecipientId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmailTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.EventReminder", b =>
                {
                    b.Property<int>("EventReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Subject")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EventReminderId");

                    b.ToTable("EventReminders");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ExternalOrgnaiztionStatus", b =>
                {
                    b.Property<int>("ExternalOrgnaiztionStatuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ExternalOrgnaiztionStatuseId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_ExternalOrgnaiztionStatuses_OrganizationId");

                    b.ToTable("ExternalOrgnaiztionStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ExternalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_ExternalUsers_OrganizationId");

                    b.ToTable("ExternalUsers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FavoriteList", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FavoriteOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex(new[] { "FavoriteOrganizationId" }, "IX_FavoriteList_FavoriteOrganizationId");

                    b.HasIndex(new[] { "FavoriteUserId" }, "IX_FavoriteList_FavoriteUserId");

                    b.HasIndex(new[] { "UserId" }, "IX_FavoriteList_UserId");

                    b.ToTable("FavoriteList");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUp", b =>
                {
                    b.Property<int>("FollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangeStatusByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FinishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FollowUpStatusCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FollowUpStatusTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FollowUpId");

                    b.HasIndex(new[] { "ChangeStatusByUserId" }, "IX_FollowUps_ChangeStatusByUserId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_FollowUps_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_FollowUps_DeletedBy");

                    b.HasIndex(new[] { "FollowUpStatusTypeId" }, "IX_FollowUps_FollowUpStatusTypeId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_FollowUps_OrganizationId");

                    b.HasIndex(new[] { "TransactionActionId" }, "IX_FollowUps_TransactionActionId");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_FollowUps_TransactionActionRecipientId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_FollowUps_TransactionId");

                    b.HasIndex(new[] { "UserId" }, "IX_FollowUps_UserId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpDateModified", b =>
                {
                    b.Property<int>("FollowUpDateModifiedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FollowUpId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("FollowUpDateModifiedId");

                    b.HasIndex(new[] { "FollowUpId" }, "IX_FollowUpDateModified_FollowUpId");

                    b.ToTable("FollowUpDateModified");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpMessagingType", b =>
                {
                    b.Property<int>("FollowUpMessagingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FollowUpMessagingTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpMessagingTypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpMessagingTypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpMessagingTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FollowUpMessagingTypeId");

                    b.ToTable("FollowUpMessagingType");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatement", b =>
                {
                    b.Property<int>("FollowUpStatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FollowUpId")
                        .HasColumnType("int");

                    b.Property<int?>("FollowUpMessagingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FollowUpStatementTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FollowUpStatementId");

                    b.HasIndex(new[] { "FollowUpId" }, "IX_FollowUpStatement_FollowUpId");

                    b.HasIndex(new[] { "FollowUpMessagingTypeId" }, "IX_FollowUpStatement_FollowUpMessagingTypeId");

                    b.HasIndex(new[] { "FollowUpStatementTypeId" }, "IX_FollowUpStatement_FollowUpStatementTypeId");

                    b.HasIndex(new[] { "UserId" }, "IX_FollowUpStatement_UserId");

                    b.ToTable("FollowUpStatement");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatementType", b =>
                {
                    b.Property<int>("FollowUpStatementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FollowUpStatementCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpStatementNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpStatementNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpStatementNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FollowUpStatementTypeId");

                    b.ToTable("FollowUpStatementType");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatus", b =>
                {
                    b.Property<int>("FollowUpStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FollowStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FollowUpId")
                        .HasColumnType("int");

                    b.HasKey("FollowUpStatusId");

                    b.HasIndex(new[] { "CreatedById" }, "IX_FollowUpStatus_CreatedById");

                    b.HasIndex(new[] { "FollowStatusTypeId" }, "IX_FollowUpStatus_FollowStatusTypeId");

                    b.HasIndex(new[] { "FollowUpId" }, "IX_FollowUpStatus_FollowUpId");

                    b.ToTable("FollowUpStatus");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatusType", b =>
                {
                    b.Property<int>("FollowUpStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FollowUpStatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FollowUpStatusTypeId");

                    b.ToTable("FollowUpStatusType");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenderNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("GenderNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("GenderNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Genders_CreatedBy");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.HangFireJobScheduling", b =>
                {
                    b.Property<string>("HangFireJobSchedulingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CronDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HangFireJobNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HangFireJobNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HangFireJobNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("HangFireJobSchedulingId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_HangFireJobSchedulings_UpdatedBy");

                    b.ToTable("HangFireJobSchedulings");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Hash", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Hash", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.HeaderAndFooter", b =>
                {
                    b.Property<int>("HeaderAndFooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Html")
                        .HasColumnType("ntext")
                        .HasColumnName("HTML");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("HeaderAndFooterId");

                    b.HasIndex(new[] { "HeaderAndFooterId", "ReportName" }, "IX_Id_ReportName");

                    b.ToTable("HeaderAndFooter");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Help", b =>
                {
                    b.Property<int>("HelpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HelpCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("HelpContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpContentFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("HelpNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("HelpNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HelpId");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ImportanceLevel", b =>
                {
                    b.Property<int>("ImportanceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ImportanceAcheivementPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("ImportanceFollowUpPeriod")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ImportanceLevelId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ImportanceLevels_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_ImportanceLevels_UpdatedBy");

                    b.ToTable("ImportanceLevels");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.IncomingType", b =>
                {
                    b.Property<int>("IncomingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HideFromRegistration")
                        .HasColumnType("bit");

                    b.Property<string>("IncomingTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("IncomingTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("IncomingTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncomingTypeId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_IncomingTypes_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_IncomingTypes_UpdatedBy");

                    b.ToTable("IncomingTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.IndividualRelationship", b =>
                {
                    b.Property<int>("IndividualRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IndividualRelationshipNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("IndividualRelationshipNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("IndividualRelationshipNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IndividualRelationshipId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_IndividualRelationships_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_IndividualRelationships_UpdatedBy");

                    b.ToTable("IndividualRelationships");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("InvocationData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Job", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.JobParameter", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId");

                    b.ToTable("JobParameter", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.JobQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FetchedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Queue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobQueue", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobTitleNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobTitleNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobTitleNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("JobTitleId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_JobTitles_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_JobTitles_UpdatedBy");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.LetterTemplate", b =>
                {
                    b.Property<int>("LetterTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("LetterTemplateNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LetterTemplateNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LetterTemplateNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LetterTemplateId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_LetterTemplates_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_LetterTemplates_UpdatedBy");

                    b.ToTable("LetterTemplates");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.LetterTemplateOrganization", b =>
                {
                    b.Property<int>("LetterTemplateOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LetterTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LetterTemplateOrganizationId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_LetterTemplateOrganizations_CreatedBy");

                    b.HasIndex(new[] { "LetterTemplateId" }, "IX_LetterTemplateOrganizations_LetterTemplateId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_LetterTemplateOrganizations_OrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_LetterTemplateOrganizations_UpdatedBy");

                    b.ToTable("LetterTemplateOrganizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.List", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("List", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Localization", b =>
                {
                    b.Property<int>("LocalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ValueAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalizationId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Localizations_CreatedBy");

                    b.HasIndex(new[] { "Key" }, "IX_Localizations_Key")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Localizations_UpdatedBy");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("MasarExceptions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarLookUpExternalOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrenchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MasarLookUpExternalOrganizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarLookUpMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MapValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MasarLookUpMaps");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarSystemIntegrated", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("MasarSystemIntegrated");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarSystemIntegratedUser", b =>
                {
                    b.Property<int>("SystemIntegratedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SystemIntegratedUserId");

                    b.HasIndex(new[] { "ModuleId" }, "IX_MasarSystemIntegratedUsers_ModuleId");

                    b.HasIndex(new[] { "UserId" }, "IX_MasarSystemIntegratedUsers_UserId");

                    b.ToTable("MasarSystemIntegratedUsers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MaxReceipient", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<long?>("RowNum")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.ToTable("MaxReceipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedRelatedTransaction", b =>
                {
                    b.Property<long>("MigratedRelatedTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("MigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RelatedMigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MigratedRelatedTransactionId");

                    b.HasIndex(new[] { "MigratedTransactionId" }, "IX_MigratedRelatedTransactions_MigratedTransactionId");

                    b.HasIndex(new[] { "RelatedMigratedTransactionId" }, "IX_MigratedRelatedTransactions_RelatedMigratedTransactionId");

                    b.ToTable("MigratedRelatedTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", b =>
                {
                    b.Property<long>("MigratedTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ByDepartmentName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ByEmployeeName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Document_ID");

                    b.Property<string>("HijriYear")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingFromOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IncomingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingReceiveMode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransfered")
                        .HasColumnType("bit");

                    b.Property<string>("OldTransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegisteredByOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MigratedTransactionId");

                    b.ToTable("MigratedTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionAction", b =>
                {
                    b.Property<long>("MigratedTransactionActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelegationDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromOrganizationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FromUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImportanceLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionActionDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionActionDateHijri")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MigratedTransactionActionId");

                    b.HasIndex(new[] { "MigratedTransactionId" }, "IX_MigratedTransactionActions_MigratedTransactionId");

                    b.ToTable("MigratedTransactionActions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionActionRecipient", b =>
                {
                    b.Property<long>("MigratedTransactionActionRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DelegationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<long?>("MigratedTransactionActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParticipantOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ParticipantType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParticipantUserName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ToDeptCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ToUserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MigratedTransactionActionRecipientId");

                    b.HasIndex(new[] { "MigratedTransactionActionId" }, "IX_MigratedTransactionActionRecipients_MigratedTransactionActionId");

                    b.ToTable("MigratedTransactionActionRecipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionAttachment", b =>
                {
                    b.Property<long>("MigratedTransactionAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MigratedTransactionAttachmentId");

                    b.HasIndex(new[] { "MigratedTransactionId" }, "IX_MigratedTransactionAttachments_MigratedTransactionId");

                    b.ToTable("MigratedTransactionAttachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalityNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("NationalityNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("NationalityNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NationalityId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Nationalities_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Nationalities_UpdatedBy");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DismissedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DismissedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Notifications_CreatedBy");

                    b.HasIndex(new[] { "DismissedBy" }, "IX_Notifications_DismissedBy");

                    b.HasIndex(new[] { "NotificationTypeId" }, "IX_Notifications_NotificationTypeId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Notifications_OrganizationId");

                    b.HasIndex(new[] { "TransactionActionId" }, "IX_Notifications_TransactionActionId");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_Notifications_TransactionActionRecipientId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_Notifications_TransactionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Notifications_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_Notifications_UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.NotificationLog", b =>
                {
                    b.Property<int>("NotificationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Reciever")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SendingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationLogId");

                    b.ToTable("NotificationLog");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NotificationTypeCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("NotificationTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("NotificationTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("NotificationTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OfficeTemplete", b =>
                {
                    b.Property<int>("OfficeTempleteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<byte[]>("TempleteFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TempleteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfficeTempleteId");

                    b.ToTable("OfficeTemplete");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OfficeTempleteOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OfficeTempleteId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OfficeTempleteId" }, "IX_OfficeTempleteOrganization_OfficeTempleteId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OfficeTempleteOrganization_OrganizationId");

                    b.ToTable("OfficeTempleteOrganization");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OldTransaction", b =>
                {
                    b.Property<int>("OldTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    b.Property<string>("FileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinishFlag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncommingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeepingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgDocmntDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgDocmntNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Periority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceievedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierDepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransacionHijriDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionBasis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionLocationDepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OldTransactionId");

                    b.ToTable("OldTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdminCanEnableDisableUsers")
                        .HasColumnType("bit");

                    b.Property<int?>("AdminOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ArchFolderEntryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("DelegateOnlyToSiblingsAndChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("DelegateToAllChildrenExceptChildrenOfMain")
                        .HasColumnType("bit");

                    b.Property<bool>("DelegateToItSelf")
                        .HasColumnType("bit");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepCode")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FollowUpOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FullPathAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlackBox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCategory")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainOrganization")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMinOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRelatedNeed")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerUserId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationWeight")
                        .HasColumnType("int");

                    b.Property<int?>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RootOrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("Smsallowed")
                        .HasColumnType("bit")
                        .HasColumnName("SMSAllowed");

                    b.Property<byte[]>("StampFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrganizationId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex(new[] { "AdminOrganizationId" }, "IX_Organizations_AdminOrganizationId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Organizations_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_Organizations_DeletedBy");

                    b.HasIndex(new[] { "FollowUpOrganizationId" }, "IX_Organizations_FollowUpOrganizationId");

                    b.HasIndex(new[] { "ManagerUserId" }, "IX_Organizations_ManagerUserId");

                    b.HasIndex(new[] { "ParentOrganizationId" }, "IX_Organizations_ParentOrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Organizations_UpdatedBy");

                    b.HasIndex(new[] { "OrganizationId", "IsOuterOrganization" }, "_dta_index_Organizations_45_1991938418__K1_K9_2_3_8066");

                    b.HasIndex(new[] { "IsOuterOrganization", "OrganizationId" }, "_dta_index_Organizations_45_1991938418__K9_K1_7271");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OrganizationGroup", b =>
                {
                    b.Property<int>("OrganizationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationGroupNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationGroupNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationGroupNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationGroupPriority")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationGroupId");

                    b.HasIndex(new[] { "UserId" }, "IX_OrganizationGroup_UserId");

                    b.ToTable("OrganizationGroup");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OrganizationGroupMember", b =>
                {
                    b.Property<int>("OrganizationGroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationGroupId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationGroupMemberId");

                    b.HasIndex(new[] { "OrganizationGroupId" }, "IX_OrganizationGroupMembers_OrganizationGroupId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OrganizationGroupMembers_OrganizationId");

                    b.ToTable("OrganizationGroupMembers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsFromAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordHistories");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("ForDelegate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommittePermission")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PermissionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermissionNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermissionNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermissionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("URL");

                    b.HasKey("PermissionId");

                    b.HasIndex("PermissionCode")
                        .IsUnique()
                        .HasFilter("[PermissionCode] IS NOT NULL");

                    b.HasIndex(new[] { "PermissionCategoryId" }, "IX_Permissions_PermissionCategoryId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.PermissionCategory", b =>
                {
                    b.Property<int>("PermissionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEmployeeCategory")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionCategoryNameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PermissionCategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PermissionCategoryNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionCategoryId");

                    b.ToTable("PermissionCategories");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.PhysicalAttachmentType", b =>
                {
                    b.Property<int>("PhysicalAttachmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhysicalAttachmentTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PhysicalAttachmentTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PhysicalAttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PhysicalAttachmentTypeId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_PhysicalAttachmentTypes_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_PhysicalAttachmentTypes_UpdatedBy");

                    b.ToTable("PhysicalAttachmentTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RecipientStatus", b =>
                {
                    b.Property<int>("RecipientStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RecipientStatusCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusLocalizeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusLocalizeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusLocalizeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipientStatusId");

                    b.ToTable("RecipientStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ReferalMode", b =>
                {
                    b.Property<int>("ReferalModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDefaultForCircular")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefaultForTransaction")
                        .HasColumnType("bit");

                    b.Property<string>("ReferalModeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferalModeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferalModeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferalModeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferalModeId");

                    b.ToTable("ReferalModes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RelatedTransaction", b =>
                {
                    b.Property<int>("RelatedTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChildOldTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChildTransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsShowAttachment")
                        .HasColumnType("bit");

                    b.Property<long>("ParentTransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TransactionRelationshipId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RelatedTransactionId");

                    b.HasIndex("ChildOldTransactionId");

                    b.HasIndex(new[] { "ChildTransactionId" }, "IX_RelatedTransactions_ChildTransactionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_RelatedTransactions_CreatedBy");

                    b.HasIndex(new[] { "ParentTransactionId" }, "IX_RelatedTransactions_ParentTransactionId");

                    b.HasIndex(new[] { "TransactionRelationshipId" }, "IX_RelatedTransactions_TransactionRelationshipId");

                    b.HasIndex(new[] { "TransactionSourceId" }, "IX_RelatedTransactions_TransactionSourceId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_RelatedTransactions_UpdatedBy");

                    b.ToTable("RelatedTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ReportRequest", b =>
                {
                    b.Property<string>("ReportRequestId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportParameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportRequestId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ReportRequests_CreatedBy");

                    b.ToTable("ReportRequests");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RequiredAction", b =>
                {
                    b.Property<int>("RequiredActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowedInCc")
                        .HasColumnType("bit")
                        .HasColumnName("AllowedInCC");

                    b.Property<bool>("AllowedInTo")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowedInVip")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsForPreparation")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RequiredActionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_RequiredActions_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_RequiredActions_UpdatedBy");

                    b.ToTable("RequiredActions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCommitteRole")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelegatedEmployeeRole")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployeeRole")
                        .HasColumnType("bit");

                    b.Property<string>("RoleNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleNameAr")
                        .IsUnique();

                    b.HasIndex("RoleNameEn")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Roles_CreatedBy");

                    b.HasIndex(new[] { "RoleNameAr" }, "IX_Roles_RoleNameAr")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleNameEn" }, "IX_Roles_RoleNameEn")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Roles_UpdatedBy");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_RolePermissions_CreatedBy");

                    b.HasIndex(new[] { "PermissionId" }, "IX_RolePermissions_PermissionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_RolePermissions_UpdatedBy");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Schema", b =>
                {
                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Version");

                    b.ToTable("Schema", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Search_CreatedBy");

                    b.HasIndex(new[] { "CreatedByUserRoleId" }, "IX_Search_CreatedByUserRoleId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Search_UpdatedBy");

                    b.ToTable("Search");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.SearchTemplate", b =>
                {
                    b.Property<int>("SearchTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SearchTemplateCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SearchTemplateNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SearchTemplateNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SearchTemplateNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SearchTemplateId");

                    b.ToTable("SearchTemplates");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Server", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LastHeartbeat" }, "IX_HangFire_Server_LastHeartbeat");

                    b.ToTable("Server", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Set", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Key");

                    b.HasIndex(new[] { "Key", "Score" }, "IX_HangFire_Set_Score");

                    b.ToTable("Set", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Signature", b =>
                {
                    b.Property<int>("SignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnotationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("SignatureFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TemplateHtml")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TemplateHTML");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SignatureId");

                    b.HasIndex(new[] { "AnnotationTypeId" }, "IX_Signatures_AnnotationTypeId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Signatures_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Signatures_OrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Signatures_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_Signatures_UserId");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Smstemplate", b =>
                {
                    b.Property<int>("SmstemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SMSTemplateId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smscode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMScode");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SmstemplateId");

                    b.ToTable("SMSTemplate");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("State", "HangFire");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.SystemSetting", b =>
                {
                    b.Property<int>("SystemSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClientSide")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("SystemSettingCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SystemSettingCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemSettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemSettingId");

                    b.HasIndex(new[] { "SystemSettingCategoryId" }, "IX_SystemSettings_SystemSettingCategoryId");

                    b.HasIndex(new[] { "SystemSettingCode" }, "NonClusteredIndex-20200301-164354")
                        .IsUnique()
                        .HasFilter("[SystemSettingCode] IS NOT NULL");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.SystemSettingCategory", b =>
                {
                    b.Property<int>("SystemSettingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SystemSettingCategoryCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingCategoryNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingCategoryNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SystemSettingCategoryNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemSettingCategoryId");

                    b.ToTable("SystemSettingCategories");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TagId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Tags_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Tags_UpdatedBy");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TicketClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TicketClassificationAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketClassificationEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketClassificationFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketClassification");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int>("HijriMonth")
                        .HasColumnType("int");

                    b.Property<int>("HijriYear")
                        .HasColumnType("int");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingCorrespondentEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IncomingCorrespondentMobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IncomingCorrespondentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingOutgoingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit")
                        .HasColumnName("isCancelled");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowAllTime")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionBasisTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasFilter("[TransactionNumber] IS NOT NULL");

                    b.HasIndex(new[] { "ClassificationId" }, "IX_Transactions_ClassificationId");

                    b.HasIndex(new[] { "ConfidentialityLevelId" }, "IX_Transactions_ConfidentialityLevelId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Transactions_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_Transactions_DeletedBy");

                    b.HasIndex(new[] { "ImportanceLevelId" }, "IX_Transactions_ImportanceLevelId");

                    b.HasIndex(new[] { "IncomingOrganizationId" }, "IX_Transactions_IncomingOrganizationId");

                    b.HasIndex(new[] { "IncomingTypeId" }, "IX_Transactions_IncomingTypeId");

                    b.HasIndex(new[] { "TransactionBasisTypeId" }, "IX_Transactions_TransactionBasisTypeId");

                    b.HasIndex(new[] { "TransactionTypeId" }, "IX_Transactions_TransactionTypeId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Transactions_UpdatedBy");

                    b.HasIndex(new[] { "ConfidentialityLevelId", "TransactionTypeId", "IncomingOrganizationId", "ExecutionPeriod", "TransactionNumberFormatted", "ExecutionDate", "ImportanceLevelId", "TransactionId" }, "_dta_index_Transactions_11_2121162702__K11_K7_K15_K22_K31_K21_K10_K1_2_4_5_6_14_25");

                    b.HasIndex(new[] { "TransactionId", "CreatedBy", "CreatedByUserRoleId", "IsCancelled", "TransactionTypeId" }, "_dta_index_Transactions_11_2121162702__K1_K24_K35_K32_K7");

                    b.HasIndex(new[] { "TransactionId", "TransactionNumberFormatted", "TransactionNumber", "ImportanceLevelId", "ConfidentialityLevelId", "TransactionTypeId", "IncomingOrganizationId" }, "_dta_index_Transactions_11_2121162702__K1_K31_K2_K10_K11_K7_K15_4_5_6_14_21_22_25");

                    b.HasIndex(new[] { "TransactionId", "TransactionTypeId", "ExecutionPeriod", "ExecutionDate", "ImportanceLevelId", "ConfidentialityLevelId", "IncomingOrganizationId" }, "_dta_index_Transactions_11_2121162702__K1_K7_K22_K21_K10_K11_K15_2_4_5_6_14_25_31");

                    b.HasIndex(new[] { "TransactionId", "TransactionTypeId", "IsCancelled", "CreatedBy", "CreatedByUserRoleId" }, "_dta_index_Transactions_11_2121162702__K1_K7_K32_K24_K35_2_3_4_5_6_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_25_26_27_28_");

                    b.HasIndex(new[] { "TransactionTypeId", "TransactionId", "ConfidentialityLevelId", "ImportanceLevelId", "IncomingOrganizationId" }, "_dta_index_Transactions_11_2121162702__K7_K1_K11_K10_K15_2_4_5_6_14_21_22_25_31");

                    b.HasIndex(new[] { "ConfidentialityLevelId", "TransactionId", "TransactionTypeId", "TransactionNumber", "TransactionNumberFormatted" }, "_dta_index_Transactions_45_2121162702__K11_K1_K7_K2_K31");

                    b.HasIndex(new[] { "ConfidentialityLevelId", "TransactionTypeId", "IncomingOrganizationId", "ImportanceLevelId", "TransactionId" }, "_dta_index_Transactions_45_2121162702__K11_K7_K15_K10_K1_25_114");

                    b.HasIndex(new[] { "TransactionId", "TransactionTypeId", "ConfidentialityLevelId" }, "_dta_index_Transactions_45_2121162702__K1_K7_K11_8337");

                    b.HasIndex(new[] { "CreatedBy", "TransactionId", "CreatedByUserRoleId", "IsCancelled", "TransactionTypeId" }, "_dta_index_Transactions_45_2121162702__K24_K1_K35_K32_K7_1040");

                    b.HasIndex(new[] { "CreatedBy", "CreatedByUserRoleId", "IsCancelled", "TransactionId", "TransactionTypeId" }, "_dta_index_Transactions_45_2121162702__K24_K35_K32_K1_K7_2533");

                    b.HasIndex(new[] { "CreatedBy", "CreatedByUserRoleId", "IsCancelled", "TransactionNumber", "TransactionId", "TransactionTypeId", "TransactionDate", "TransactionBasisTypeId", "ClassificationId", "ImportanceLevelId", "ConfidentialityLevelId", "IncomingTypeId", "IncomingLetterNumber", "TransactionNumberFormatted" }, "_dta_index_Transactions_45_2121162702__K24_K35_K32_K2_K1_K7_K3_K8_K9_K10_K11_K12_K13_K31_4_5_6_14_15_16_17_18_19_20_21_2_6221");

                    b.HasIndex(new[] { "TransactionTypeId", "HijriMonth", "HijriYear" }, "_dta_index_Transactions_45_2121162702__K7_K33_K34_25_5201");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAction", b =>
                {
                    b.Property<int>("TransactionActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DisabledUntil")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FromCommitteId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("OutgoingImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("OutgoingIsConfidential")
                        .HasColumnType("bit");

                    b.Property<string>("OutgoingTransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("OutgoingTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferrerTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionActionId");

                    b.HasIndex(new[] { "ActionId" }, "IX_TransactionActions_ActionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionActions_CreatedBy");

                    b.HasIndex(new[] { "CreatedByUserRoleId" }, "IX_TransactionActions_CreatedByUserRoleId");

                    b.HasIndex(new[] { "DirectedFromOrganizationId" }, "IX_TransactionActions_DirectedFromOrganizationId");

                    b.HasIndex(new[] { "DirectedFromUserId" }, "IX_TransactionActions_DirectedFromUserId");

                    b.HasIndex(new[] { "ReferrerTransactionActionId" }, "IX_TransactionActions_ReferrerTransactionActionId");

                    b.HasIndex(new[] { "ReferrerTransactionActionRecipientId" }, "IX_TransactionActions_ReferrerTransactionActionRecipientId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransactionActions_TransactionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionActions_UpdatedBy");

                    b.HasIndex(new[] { "CreatedOn" }, "NonClusteredIndex-TrActionCreatedOn");

                    b.HasIndex(new[] { "TransactionActionId", "ArchieveDate", "ActionId", "TransactionId", "CreatedBy", "DirectedFromUserId", "DirectedFromOrganizationId" }, "_dta_index_TransactionActions_11_1230627427__K1_K23_K4_K3_K16_K7_K8_5_17");

                    b.HasIndex(new[] { "TransactionActionId", "TransactionId", "DirectedFromUserId", "DirectedFromOrganizationId", "ArchieveDate", "ActionId", "CreatedBy" }, "_dta_index_TransactionActions_11_1230627427__K1_K3_K7_K8_K23_K4_K16_5_17");

                    b.HasIndex(new[] { "TransactionId", "TransactionActionId", "ActionId", "CreatedBy", "DirectedFromUserId", "DirectedFromOrganizationId" }, "_dta_index_TransactionActions_11_1230627427__K3_K1_K4_K16_K7_K8_5_17_23");

                    b.HasIndex(new[] { "DirectedFromOrganizationId", "ActionId", "ArchieveDate", "TransactionActionId", "TransactionId" }, "_dta_index_TransactionActions_11_1230627427__K8_K4_K23_K1_K3");

                    b.HasIndex(new[] { "TransactionActionId", "TransactionId", "ArchieveDate", "ActionId", "DirectedFromUserId", "DirectedFromOrganizationId" }, "_dta_index_TransactionActions_45_1230627427__K1_K3_K23_K4_K7_K8_9850");

                    b.HasIndex(new[] { "TransactionActionId", "TransactionId", "ActionId" }, "_dta_index_TransactionActions_45_1230627427__K1_K3_K4_8526_8341");

                    b.HasIndex(new[] { "ArchieveDate", "ActionId", "TransactionActionId", "TransactionId" }, "_dta_index_TransactionActions_45_1230627427__K23_K4_K1_K3_8066");

                    b.HasIndex(new[] { "ArchieveDate", "ActionId", "DirectedFromUserId", "DirectedFromOrganizationId", "TransactionId", "TransactionActionId" }, "_dta_index_TransactionActions_45_1230627427__K23_K4_K7_K8_K3_K1");

                    b.HasIndex(new[] { "TransactionId", "TransactionActionId", "ActionId" }, "_dta_index_TransactionActions_45_1230627427__K3_K1_K4_1410");

                    b.HasIndex(new[] { "ActionId", "TransactionActionId", "CreatedByUserRoleId", "TransactionId", "CreatedBy", "DirectedFromUserId", "DirectedFromOrganizationId" }, "_dta_index_TransactionActions_45_1230627427__K4_K1_K10_K3_K16_K7_K8_5_17_23_2533");

                    b.HasIndex(new[] { "ActionId", "ArchieveDate", "TransactionActionId", "TransactionId" }, "_dta_index_TransactionActions_45_1230627427__K4_K23_K1_K3_8_10");

                    b.HasIndex(new[] { "ActionId", "ArchieveDate", "TransactionActionId", "TransactionId", "CreatedBy", "DirectedFromUserId", "DirectedFromOrganizationId" }, "_dta_index_TransactionActions_45_1230627427__K4_K23_K1_K3_K16_K7_K8_5_17_3982");

                    b.HasIndex(new[] { "ActionId", "DirectedFromOrganizationId", "ArchieveDate", "TransactionActionId", "TransactionId" }, "_dta_index_TransactionActions_45_1230627427__K4_K8_K23_K1_K3_2533");

                    b.ToTable("TransactionActions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionAttachment", b =>
                {
                    b.Property<int>("TransactionActionAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionActionAttachmentId");

                    b.HasIndex(new[] { "TransactionActionId" }, "IX_TransactionActionAttachment_TransactionActionId");

                    b.HasIndex(new[] { "TransactionAttachmentId" }, "IX_TransactionActionAttachment_TransactionAttachmentId");

                    b.ToTable("TransactionActionAttachment");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", b =>
                {
                    b.Property<int>("TransactionActionRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoteHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipientStatusChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RecipientStatusChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("bit");

                    b.Property<int?>("ToCommitteId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UrgencyDaysCount")
                        .HasColumnType("int");

                    b.HasKey("TransactionActionRecipientId");

                    b.HasIndex(new[] { "CorrespondentUserId" }, "IX_TransactionActionRecipients_CorrespondentUserId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionActionRecipients_CreatedBy");

                    b.HasIndex(new[] { "DirectedToOrganizationId" }, "IX_TransactionActionRecipients_DirectedToOrganizationId");

                    b.HasIndex(new[] { "DirectedToUserId" }, "IX_TransactionActionRecipients_DirectedToUserId");

                    b.HasIndex(new[] { "RecipientStatusChangedBy" }, "IX_TransactionActionRecipients_RecipientStatusChangedBy");

                    b.HasIndex(new[] { "RecipientStatusId" }, "IX_TransactionActionRecipients_RecipientStatusId");

                    b.HasIndex(new[] { "RequiredActionId" }, "IX_TransactionActionRecipients_RequiredActionId");

                    b.HasIndex(new[] { "TransactionActionId" }, "IX_TransactionActionRecipients_TransactionActionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionActionRecipients_UpdatedBy");

                    b.HasIndex(new[] { "TransactionActionId", "IsCc", "TransactionActionRecipientId", "DirectedToOrganizationId", "DirectedToUserId", "CorrespondentUserId", "RequiredActionId", "IsUrgent", "UrgencyDaysCount", "RecipientStatusId", "SendNotification" }, "_dta_index_TransactionActionRecipients_11_1390627997__K2_K6_K1_K4_K3_K7_K5_K11_K12_K8_K14_13");

                    b.HasIndex(new[] { "TransactionActionId", "DirectedToUserId", "DirectedToOrganizationId", "IsCc", "RecipientStatusId" }, "_dta_index_TransactionActionRecipients_45_1390627997__K2_K3_K4_K6_K8_4149");

                    b.HasIndex(new[] { "TransactionActionId", "DirectedToUserId", "DirectedToOrganizationId", "IsCc", "RecipientStatusId" }, "_dta_index_TransactionActionRecipients_45_1390627997__K2_K3_K4_K6_K8_7_16_4364");

                    b.HasIndex(new[] { "TransactionActionId", "DirectedToOrganizationId", "CorrespondentUserId", "TransactionActionRecipientId", "CreatedOn", "RecipientStatusId", "DirectedToUserId", "RequiredActionId" }, "_dta_index_TransactionActionRecipients_45_1390627997__K2_K4_K7_K1_K16_K8_K3_K5_6_11");

                    b.HasIndex(new[] { "DirectedToUserId", "DirectedToOrganizationId", "RecipientStatusId", "CreatedOn", "TransactionActionRecipientId" }, "_dta_index_TransactionActionRecipients_45_1390627997__K3_K4_K8_K16_K1_6497");

                    b.HasIndex(new[] { "DirectedToOrganizationId", "TransactionActionRecipientId", "DirectedToUserId", "RecipientStatusId", "CreatedOn" }, "_dta_index_TransactionActionRecipients_45_1390627997__K4_K1_K3_K8_K16_1040");

                    b.HasIndex(new[] { "RecipientStatusId", "TransactionActionRecipientId", "CreatedOn", "DirectedToUserId", "DirectedToOrganizationId", "TransactionActionId" }, "_dta_index_TransactionActionRecipients_45_1390627997__K8_K1_K16_K3_K4_K2");

                    b.ToTable("TransactionActionRecipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipientAttachment", b =>
                {
                    b.Property<int>("TransactionActionRecipientAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentStatusChangedBy")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionActionRecipientAttachmentId");

                    b.HasIndex(new[] { "AttachmentStatusChangedBy" }, "IX_TransactionActionRecipientAttachments_AttachmentStatusChangedBy");

                    b.HasIndex(new[] { "AttachmentStatusId" }, "IX_TransactionActionRecipientAttachments_AttachmentStatusId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionActionRecipientAttachments_CreatedBy");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_TransactionActionRecipientAttachments_TransactionActionRecipientId");

                    b.HasIndex(new[] { "TransactionAttachmentId" }, "IX_TransactionActionRecipientAttachments_TransactionAttachmentId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionActionRecipientAttachments_UpdatedBy");

                    b.HasIndex(new[] { "TransactionActionRecipientId", "TransactionActionRecipientAttachmentId" }, "_dta_index_TransactionActionRecipientAttach_11_2046630334__K2_K1_3_5_6_8_9_10_11");

                    b.HasIndex(new[] { "TransactionActionRecipientId", "TransactionAttachmentId", "TransactionActionRecipientAttachmentId" }, "_dta_index_TransactionActionRecipientAttach_11_2046630334__K2_K3_K1");

                    b.ToTable("TransactionActionRecipientAttachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipientStatus", b =>
                {
                    b.Property<int>("TransactionActionRecipientStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchiveReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("TransactionActionRecipientStatusId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionActionRecipientStatuses_CreatedBy");

                    b.HasIndex(new[] { "RecipientStatusId" }, "IX_TransactionActionRecipientStatuses_RecipientStatusId");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_TransactionActionRecipientStatuses_TransactionActionRecipientId");

                    b.HasIndex(new[] { "UserRoleId" }, "IX_TransactionActionRecipientStatuses_UserRoleId");

                    b.ToTable("TransactionActionRecipientStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipientUpdateStatus", b =>
                {
                    b.Property<int>("TransactionActionRecipientUpdateStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrentRecipientStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UpdateIsDone")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateRecipientStatusId")
                        .HasColumnType("int");

                    b.HasKey("TransactionActionRecipientUpdateStatusId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionActionRecipientUpdateStatuses_CreatedBy");

                    b.HasIndex(new[] { "CurrentRecipientStatusId" }, "IX_TransactionActionRecipientUpdateStatuses_CurrentRecipientStatusId");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_TransactionActionRecipientUpdateStatuses_TransactionActionRecipientId");

                    b.HasIndex(new[] { "UpdateRecipientStatusId" }, "IX_TransactionActionRecipientUpdateStatuses_UpdateRecipientStatusId");

                    b.ToTable("TransactionActionRecipientUpdateStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAttachment", b =>
                {
                    b.Property<int>("TransactionAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("TransactionAttachmentId");

                    b.HasIndex(new[] { "AttachmentId" }, "IX_TransactionAttachments_AttachmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionAttachments_CreatedBy");

                    b.HasIndex(new[] { "DeletedBy" }, "IX_TransactionAttachments_DeletedBy");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransactionAttachments_TransactionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionAttachments_UpdatedBy");

                    b.HasIndex(new[] { "UserRoleId" }, "IX_TransactionAttachments_UserRoleId");

                    b.HasIndex(new[] { "TransactionAttachmentId", "AttachmentId", "TransactionId" }, "_dta_index_TransactionAttachments_11_1843641761__K1_K3_K2");

                    b.HasIndex(new[] { "AttachmentId", "TransactionAttachmentId", "TransactionId" }, "_dta_index_TransactionAttachments_11_1843641761__K3_K1_K2");

                    b.ToTable("TransactionAttachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAttachmentIndex", b =>
                {
                    b.Property<long>("AttachementIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromOrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromPage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("IndexDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndexType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ToPage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TransactionAttachmentId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AttachementIndexId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionAttachmentIndex_CreatedBy");

                    b.HasIndex(new[] { "TransactionAttachmentId" }, "IX_TransactionAttachmentIndex_TransactionAttachmentId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransactionAttachmentIndex_TransactionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionAttachmentIndex_UpdatedBy");

                    b.ToTable("TransactionAttachmentIndex");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionBasisType", b =>
                {
                    b.Property<int>("TransactionBasisTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionBasisTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionBasisTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionBasisTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionBasisTypeId");

                    b.ToTable("TransactionBasisTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionDetailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("FromSearch")
                        .HasColumnType("bit");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TransactionActionId" }, "IX_TransactionDetailLogs_TransactionActionId");

                    b.HasIndex(new[] { "TransactionActionRecipientId" }, "IX_TransactionDetailLogs_TransactionActionRecipientId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransactionDetailLogs_TransactionId");

                    b.HasIndex(new[] { "UserRoleId" }, "IX_TransactionDetailLogs_UserRoleId");

                    b.ToTable("TransactionDetailLogs");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionIndividual", b =>
                {
                    b.Property<int>("TransactionIndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IndividualRelationshipId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionIndividualId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionIndividuals_CreatedBy");

                    b.HasIndex(new[] { "IndividualRelationshipId" }, "IX_TransactionIndividuals_IndividualRelationshipId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransactionIndividuals_TransactionId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionIndividuals_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_TransactionIndividuals_UserId");

                    b.ToTable("TransactionIndividuals");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionRegisterationType", b =>
                {
                    b.Property<int>("TransactionRegisterationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionRegisterationTypeAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionRegisterationTypeEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionRegisterationTypeFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionRegisterationTypeId");

                    b.ToTable("TransactionRegisterationType");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionRelationship", b =>
                {
                    b.Property<int>("TransactionRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("SavedRelatedTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("SentRelatedTransaction")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionRelationshipNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionRelationshipNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionRelationshipNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionRelationshipId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionRelationships_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionRelationships_UpdatedBy");

                    b.ToTable("TransactionRelationships");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionSource", b =>
                {
                    b.Property<int>("TransactionSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TransactionSourceCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionSourceNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionSourceNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionSourceNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionSourceId");

                    b.ToTable("TransactionSources");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionSubject", b =>
                {
                    b.Property<int>("TransactionSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionSubjectText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionSubjectId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionSubject_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionSubject_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_TransactionSubject_UserId");

                    b.ToTable("TransactionSubject");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionTag", b =>
                {
                    b.Property<int>("TransactionTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionTagId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionTags_CreatedBy");

                    b.HasIndex(new[] { "TagId" }, "IX_TransactionTags_TagId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransactionTags_TransactionId");

                    b.ToTable("TransactionTags");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddOrgCodeToSerial")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDelegateToMulti")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDecision")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionTypeCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeCodeForSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionTypeClassification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionTypeClassificationId")
                        .HasColumnType("int");

                    b.HasKey("ClassificationId", "TransactionTypeId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex(new[] { "TransactionTypeClassificationId" }, "IX_TransactionTypeClassifications_TransactionTypeId")
                        .HasDatabaseName("IX_TransactionTypeClassifications_TransactionTypeId1");

                    b.ToTable("TransactionTypeClassifications");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionTypeSerialAdjustment", b =>
                {
                    b.Property<int>("TransactionTypeSerialAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdjustPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeSerialAdjustmentId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionTypeSerialAdjustment_CreatedBy");

                    b.HasIndex(new[] { "TransactionTypeId" }, "IX_TransactionTypeSerialAdjustment_TransactionTypeId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionTypeSerialAdjustment_UpdatedBy");

                    b.ToTable("TransactionTypeSerialAdjustment");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionWorkFlowProcess", b =>
                {
                    b.Property<int>("TransactionWorkFlowProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecepientId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("WorkFlowProcessId")
                        .HasColumnType("int");

                    b.HasKey("TransactionWorkFlowProcessId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_TransactionWorkFlowProcess_CreatedBy");

                    b.HasIndex(new[] { "TransactionActionId" }, "IX_TransactionWorkFlowProcess_TransactionActionId");

                    b.HasIndex(new[] { "TransactionActionRecepientId" }, "IX_TransactionWorkFlowProcess_TransactionActionRecepientId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_TransactionWorkFlowProcess_UpdatedBy");

                    b.HasIndex(new[] { "WorkFlowProcessId" }, "IX_TransactionWorkFlowProcess_WorkFlowProcessId");

                    b.ToTable("TransactionWorkFlowProcess");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransfaredFaxis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransfaredFaxes_TransactionId");

                    b.ToTable("TransfaredFaxes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaptchaCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("CaptchaExpireDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DefaultCalendar")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DefaultCulture")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("DefaultInboxFilter")
                        .HasColumnType("int");

                    b.Property<int>("DelegationDefaultId")
                        .HasColumnType("int")
                        .HasColumnName("DelegationDefaultID");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("EnabledUntil")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("ExternalUser")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("FactorAuthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FactorAuthValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFactorAuth")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSignatureFactorAuth")
                        .HasColumnType("bit");

                    b.Property<int?>("IndividualAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondentForAllOrganizations")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHijriDate")
                        .HasColumnType("bit")
                        .HasColumnName("isHijriDate");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowCalender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowPeriodStatistics")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowTask")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowTransactionOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowTransactionRelated")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastLoggedIn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationByMail")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationBySms")
                        .HasColumnType("bit")
                        .HasColumnName("NotificationBySMS");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("PasswordUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProfileImageFileId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImageMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RequestID");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowEvents")
                        .HasColumnType("bit")
                        .HasColumnName("showEvents");

                    b.Property<bool>("ShowStatistics")
                        .HasColumnType("bit")
                        .HasColumnName("showStatistics");

                    b.Property<int?>("SignatureFileId")
                        .HasColumnType("int");

                    b.Property<string>("SignaturePassword")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SSN");

                    b.Property<int?>("StampFileId")
                        .HasColumnType("int");

                    b.Property<int?>("TrkeenFileId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserTheme")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userTheme");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WorkPlaceId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "IX_Users_Username")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "_dta_index_Users_45_1105647232__K1_7_10_11_1563");

                    b.HasIndex(new[] { "UserId" }, "_dta_index_Users_45_1105647232__K1_7_9910");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserCorrespondentOrganization", b =>
                {
                    b.Property<int>("UserCorrespondentOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCorrespondentOrganizationId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_UserCorrespondentOrganizations_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_UserCorrespondentOrganizations_OrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UserCorrespondentOrganizations_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_UserCorrespondentOrganizations_UserId");

                    b.ToTable("UserCorrespondentOrganizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserJob_UserId");

                    b.ToTable("UserJob");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "PermissionId", "OrganizationId", "RoleId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_UserPermissions_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_UserPermissions_OrganizationId");

                    b.HasIndex(new[] { "PermissionId" }, "IX_UserPermissions_PermissionId");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserPermissions_RoleId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UserPermissions_UpdatedBy");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EnabledSince")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EnabledUntil")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("LastSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool?>("RoleOverridesUserPermissions")
                        .HasColumnType("bit");

                    b.Property<int?>("SyncTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex(new[] { "RoleId", "UserId", "OrganizationId" }, "IX_MultipleColumns")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedBy" }, "IX_UserRoles_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_UserRoles_OrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UserRoles_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoles_UserId");

                    b.HasIndex(new[] { "UserId", "OrganizationId", "EnabledUntil" }, "_dta_index_UserRoles_11_1209875477__K2_K4_K7");

                    b.HasIndex(new[] { "OrganizationId", "UserRoleId" }, "_dta_index_UserRoles_45_1209875477__K4_K1_2");

                    b.HasIndex(new[] { "OrganizationId", "EnabledUntil", "UserId", "UserRoleId" }, "_dta_index_UserRoles_45_1209875477__K4_K7_K2_K1_8066");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserSignatureFactorAuth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FactorAuthCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FactorAuthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserSignatureFactorAuths_UserId");

                    b.ToTable("UserSignatureFactorAuths");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserSpecificOrganizationsAndEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFromSync")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_UserSpecificOrganizationsAndEmployees_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_UserSpecificOrganizationsAndEmployees_OrganizationId");

                    b.HasIndex(new[] { "SpecificOrganizationId" }, "IX_UserSpecificOrganizationsAndEmployees_SpecificOrganizationId");

                    b.HasIndex(new[] { "SpecificUserId" }, "IX_UserSpecificOrganizationsAndEmployees_SpecificUserId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UserSpecificOrganizationsAndEmployees_UpdatedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_UserSpecificOrganizationsAndEmployees_UserId");

                    b.ToTable("UserSpecificOrganizationsAndEmployees");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("AccessTokenExpiresDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AccessTokenHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RefreshTokenIdHash")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshTokenIdHashSource")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserToken_UserId");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserVacation", b =>
                {
                    b.Property<int>("UserVacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StandByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserVacationId");

                    b.HasIndex(new[] { "StandByUserId" }, "IX_UserVacation_StandByUserId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserVacation_UserId");

                    b.ToTable("UserVacation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UsersDashboardStatistic", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AllTasks")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedTransactions")
                        .HasColumnType("bigint");

                    b.Property<long>("DecisionAndCirculars")
                        .HasColumnType("bigint");

                    b.Property<long>("Delayed")
                        .HasColumnType("bigint");

                    b.Property<long>("Finished")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("Received")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceivingExportingDelegations")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionsCc")
                        .HasColumnType("bigint")
                        .HasColumnName("TransactionsCC");

                    b.Property<long>("UnRecieved")
                        .HasColumnType("bigint");

                    b.Property<long>("WithdrawalRequests")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId");

                    b.ToTable("UsersDashboardStatistics");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UsersSso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordEncrypted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RequestedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Ssokey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SSOKey");

                    b.Property<string>("UserNameEncrypted")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersSSO");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ViewDeiverySheetViewVm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createdOn");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FollowUpfinishedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("FollowUPFinishedDate");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HasCorrespnd")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretSubject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("secretSubject");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionStatus");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transactionTypeId");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameAr");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameEn");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameFn");

                    b.HasKey("Id");

                    b.ToTable("View_DeiverySheetView_vm");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ViewPoint", b =>
                {
                    b.Property<int>("ViewPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ViewPointCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ViewPointNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ViewPointNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ViewPointNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ViewPointId");

                    b.ToTable("ViewPoints");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmActionView", b =>
                {
                    b.Property<string>("ActionCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ActionNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowCcemployees")
                        .HasColumnType("bit")
                        .HasColumnName("AllowCCEmployees");

                    b.Property<bool?>("AllowCcexternalOrganization")
                        .HasColumnType("bit")
                        .HasColumnName("AllowCCExternalOrganization");

                    b.Property<bool?>("AllowCcinternalOrganization")
                        .HasColumnType("bit")
                        .HasColumnName("AllowCCInternalOrganization");

                    b.Property<bool?>("AllowInCaseCctransactionInPreparation")
                        .HasColumnType("bit")
                        .HasColumnName("AllowInCaseCCTransactionInPreparation");

                    b.Property<bool?>("AllowMulti")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowToEmployees")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowToExternalOrganization")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowToInternalOrganization")
                        .HasColumnType("bit");

                    b.Property<int?>("DefaultCcrequiredActionId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultCCRequiredActionId");

                    b.Property<string>("DefaultCcrequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DefaultCCRequiredActionNameAr");

                    b.Property<string>("DefaultCcrequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DefaultCCRequiredActionNameEn");

                    b.Property<string>("DefaultCcrequiredActionNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DefaultCCRequiredActionNameFn");

                    b.Property<int?>("DefaultToRequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultToRequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultToRequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultToRequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasRecipient")
                        .HasColumnType("bit");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.ToTable("VmActionViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmAnnouncementsView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createdOn");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionStatus");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transactionTypeId");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameAr");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameEn");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameFn");

                    b.HasKey("Id");

                    b.ToTable("Vm_Announcements_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmArchiveDeliverySheet", b =>
                {
                    b.Property<string>("CorrespondUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeliverySheetAttachmentsCount")
                        .HasColumnType("int");

                    b.Property<int>("DeliverySheetId")
                        .HasColumnType("int");

                    b.Property<string>("DeliverySheetNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("DeliverySheetStatusId")
                        .HasColumnType("int");

                    b.Property<string>("DoneByFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DoneByFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.ToTable("VmArchiveDeliverySheets");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmAssignmentsView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createdOn");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionStatus");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transactionTypeId");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameAr");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameEn");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameFn");

                    b.HasKey("Id");

                    b.ToTable("Vm_Assignments_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmAttachmentView", b =>
                {
                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AttachmentTypeCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedByFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedByFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("LfentryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LFEntryId");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnazationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnazationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnazationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalAttachmentTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PhysicalAttachmentTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PhysicalAttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int>("TransactionAttachmentId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.ToTable("VmAttachmentViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmDeliveryAttachmentView", b =>
                {
                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DeliverySheetAttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("DeliverySheetId")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LfentryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LFEntryId");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.ToTable("VmDeliveryAttachmentViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmDraftTransaction", b =>
                {
                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingCorrespondentEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IncomingCorrespondentMobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IncomingCorrespondentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingOutgoingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit")
                        .HasColumnName("isCancelled");

                    b.Property<bool>("IsDecision")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionBasisTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionTypeCodeForSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("VmDraftTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmExternalDelegationView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createdOn");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionStatus");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transactionTypeId");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameAr");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameEn");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameFn");

                    b.HasKey("Id");

                    b.ToTable("Vm_ExternalDelegation_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmFollowUpSpecialReportView", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<string>("ClassificationNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassificationNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassificationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentDirectedToOrganizationAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ParentDirectedToORganizationAr");

                    b.Property<string>("ParentDirectedToOrganizationEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ParentDirectedToORganizationEn");

                    b.Property<string>("ParentDirectedToOrganizationFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ParentDirectedToORganizationFn");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmFollowUpSpecialReportViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmFollowUpView", b =>
                {
                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("FollowUpId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FollowUpStatusCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FollowUpStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ToTable("VmFollowUpViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmFunctionsIncomingOrganizationReportView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DelegatedOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("DelegatedOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DelegatedOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vm_functions_IncomingOrganization_report_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmGetLastStatusByTransactionIdView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vm_GetLast_statusBy_TransactionId_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmIncomingOrganizationReportView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TcreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("TCreatedOn");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vm_IncomingOrganization_report_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmMigratedAttachmentView", b =>
                {
                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AttachmentTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttachmentTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("LfentryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LFEntryId");

                    b.Property<long>("MigratedTransactionAttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalAttachmentTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhysicalAttachmentTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhysicalAttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.ToTable("VmMigratedAttachmentViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmMigratedTransactionView", b =>
                {
                    b.Property<string>("ApplicationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ByDepartmentName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ByEmployeeName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelegationDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelegationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromOrganizationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FromUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HijriYear")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportanceLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingFromOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IncomingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingReceiveMode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InstructionsAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsRecipient")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTransfered")
                        .HasColumnType("bit");

                    b.Property<long?>("MigratedTransactionActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("MigratedTransactionActionRecipientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("OldTransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParticipantOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ParticipantType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParticipantUserName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RegisteredByOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDeptCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ToUserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("VmMigratedTransactionViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmMigratedTransactionViewCase2", b =>
                {
                    b.Property<string>("ApplicationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ByDepartmentName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ByEmployeeName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelegationDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelegationType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("FromOrganizationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FromUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HijriYear")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportanceLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingFromOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IncomingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomingReceiveMode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InstructionsAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsRecipient")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransfered")
                        .HasColumnType("bit");

                    b.Property<long?>("MigratedTransactionActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MigratedTransactionActionRecipientId")
                        .HasColumnType("bigint");

                    b.Property<long>("MigratedTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("OldTransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParticipantOrganizationName")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ParticipantUserName")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("RegisteredByOrganizationName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDeptCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ToUserName")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("VmMigratedTransactionViewCase2s");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmNotificationView", b =>
                {
                    b.Property<string>("ContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DismissedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DismissedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FromUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotificationTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotificationTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ToTable("VmNotificationViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmOrganizationToReportVm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdminOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCategory")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vm_OrganizationToReport_vm");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmOutGoingOrganizationInternallyReport", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.ToTable("VmOutGoingOrganizationInternallyReports");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmOutGoingOrganizationReport", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.ToTable("VmOutGoingOrganizationReports");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmReceiveOutgoingView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createdOn");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionStatus");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transactionTypeId");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameAr");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameEn");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionTypeNameFn");

                    b.HasKey("Id");

                    b.ToTable("Vm_receiveOutgoing_View");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmRecipientsName", b =>
                {
                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondentUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondentUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondentUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("UrgencyDaysCount")
                        .HasColumnType("int");

                    b.ToTable("VmRecipientsNames");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmSenderName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ToTable("VmSenderNames");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientSavedView", b =>
                {
                    b.Property<int?>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ArchiveReasonId")
                        .HasColumnType("int");

                    b.Property<string>("ArchiveReasonNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArchiveReasonNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArchiveReasonNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasCorrespondence")
                        .HasColumnType("int")
                        .HasColumnName("hasCorrespondence");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<int?>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset?>("RecipientStatusChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionActionRecipientStatusesCreatedBy")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TransactionActionRecipientStatusesCreatedByNameAr")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("TransactionActionRecipientStatusesCreatedByNameAR");

                    b.Property<string>("TransactionActionRecipientStatusesCreatedByNameEn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TransactionActionRecipientStatusesCreatedByNameFn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TransactionActionRecipientStatusesCreatedOn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmTransactionActionRecipientSavedViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientView", b =>
                {
                    b.Property<int?>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasCorrespnd")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<int?>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("ReferrerTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmTransactionActionRecipientViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewDelivirySheet", b =>
                {
                    b.Property<int?>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeliverySheetId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HasCorrespnd")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<int?>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("ReferrerTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("VmTransactionActionRecipientViewDelivirySheets");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewInbox", b =>
                {
                    b.Property<int?>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUserRoleOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserRoleOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserRoleOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasCorrespondence")
                        .HasColumnType("int")
                        .HasColumnName("hasCorrespondence");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<int?>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowAllTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmTransactionActionRecipientViewInboxes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewInboxEva", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<int?>("MainRecipientStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientStatusChangedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int");

                    b.ToTable("VmTransactionActionRecipientViewInboxEvas");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewKpi", b =>
                {
                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("TransactionStatus")
                        .HasColumnType("int")
                        .HasColumnName("transactionStatus");

                    b.ToTable("VmTransactionActionRecipientViewKpis");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewOutbox", b =>
                {
                    b.Property<int?>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasCorrespondence")
                        .HasColumnType("int")
                        .HasColumnName("hasCorrespondence");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<int?>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit")
                        .HasColumnName("isCancelled");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsShowAllTime")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmTransactionActionRecipientViewOutboxes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewOutboxEva", b =>
                {
                    b.Property<int?>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasCorrespondence")
                        .HasColumnType("int")
                        .HasColumnName("hasCorrespondence");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameFn");

                    b.Property<int?>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit")
                        .HasColumnName("isCancelled");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool?>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmTransactionActionRecipientViewOutboxEvas");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewReport", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("RecipientStatusChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TarcreationOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("TARCreationOn");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.ToTable("VmTransactionActionRecipientViewReports");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionActionRecipientViewStatstic", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("RecipientStatusChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TarcreationOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("TARCreationOn");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.ToTable("VmTransactionActionRecipientViewStatstics");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionCorrespondent", b =>
                {
                    b.Property<int?>("CorrespondentUser")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryCorrespondentTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCorrespondentTransactionID");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("DirectedFromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectedFromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("DirectedToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectedToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasDeliveryCorresponden")
                        .HasColumnType("int")
                        .HasColumnName("hasDeliveryCorresponden");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.ToTable("VmTransactionCorrespondents");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionForLateFromDelegation", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttchmentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DelegationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FromUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("HijriYear")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOrganizationNameFr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndividualIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("individual_IdentificationNumber");

                    b.Property<string>("IndividualMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("individual_Mobile");

                    b.Property<int?>("IndividualUserId")
                        .HasColumnType("int")
                        .HasColumnName("individual_userId");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<int>("LatePeriod")
                        .HasColumnType("int");

                    b.Property<string>("LbLreferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LbLReferenceNumber");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldTransactionDate")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("RegisterationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RegisteredBy")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int?>("ToOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ToUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Transaction_Notes");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("VmTransactionForLateFromDelegations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionForLateFromReg", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttchmentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DelegationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FromUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("HijriYear")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOrganizationNameFr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndividualIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("individual_IdentificationNumber");

                    b.Property<string>("IndividualMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("individual_Mobile");

                    b.Property<int?>("IndividualUserId")
                        .HasColumnType("int")
                        .HasColumnName("individual_userId");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<int>("LatePeriod")
                        .HasColumnType("int");

                    b.Property<string>("LbLreferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LbLReferenceNumber");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldTransactionDate")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("RegisterationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RegisteredBy")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int?>("ToOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ToUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Transaction_Notes");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("VmTransactionForLateFromRegs");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionForSavedForReport", b =>
                {
                    b.Property<DateTimeOffset?>("FilterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOrganizationNameFn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationSavedId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationSavedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationSavedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationSavedNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonSave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipientStatusChangedBy")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SavedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("UserChangedByNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserChangedByNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserChangedByNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VmTransactionForSavedForReports");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionForSearch", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttchmentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FromUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("HijriYear")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("individual_IdentificationNumber");

                    b.Property<string>("IndividualMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("individual_Mobile");

                    b.Property<int?>("IndividualUserId")
                        .HasColumnType("int")
                        .HasColumnName("individual_userId");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<string>("LbLreferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LbLReferenceNumber");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldTransactionDate")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("RegisterationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RegisteredBy")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int?>("ToOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ToUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Transaction_Notes");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("VmTransactionForSearches");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionForSearchForReport", b =>
                {
                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedFromUserId")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FromUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("HijriYear")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit")
                        .HasColumnName("isCancelled");

                    b.Property<bool?>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool?>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<string>("LbLreferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LbLReferenceNumber");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldTransactionDate")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientStatusChangedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("RegisterationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RegisteredBy")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ToUserProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TrsActionCreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("trs_actionCreatedOn");

                    b.Property<string>("UserIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("VmTransactionForSearchForReports");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmTransactionMapView", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ArchieveDate")
                        .HasColumnType("int")
                        .HasColumnName("archieveDate");

                    b.Property<int>("BlackBoxEnabled")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorrespondingUserNameAR");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedByNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedByNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<int>("FromOrganizationBlackBoxOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationBlackBoxOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationBlackBoxOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FromUserOrganizationBlackBoxOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserOrganizationBlackBoxOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserOrganizationBlackBoxOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasCorrespnd")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("IncomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameAr");

                    b.Property<string>("IncomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incomingOrganizationNameEn");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit")
                        .HasColumnName("IsCC");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsNoteHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RecipientStatusChangedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusLocalizeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusLocalizeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("ReferrerTransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SameHickalDirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("SameHickalFromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<int>("ToOrganizationBlackBoxOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ToOrganizationBlackBoxOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationBlackBoxOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ToUserOrganizationBlackBoxOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserOrganizationBlackBoxOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserOrganizationBlackBoxOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TransactionTypeNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("WorkDays")
                        .HasColumnType("int");

                    b.ToTable("VmTransactionMapViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VmUserRoleCountOfUnDelivered", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountOfUnDelivered")
                        .HasColumnType("bigint");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vm_UserRoleCountOfUnDelivered");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VwGetEmployeeAllTransactionCount", b =>
                {
                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("username");

                    b.Property<int?>("صورةونسخة")
                        .HasColumnType("int")
                        .HasColumnName("صورة ونسخة");

                    b.Property<int?>("غيرمستلمة")
                        .HasColumnType("int")
                        .HasColumnName("غير مستلمة");

                    b.Property<int?>("غيرمستلمةسرية")
                        .HasColumnType("int")
                        .HasColumnName("غير مستلمة - سرية");

                    b.Property<int?>("قراراتوتعماميم")
                        .HasColumnType("int")
                        .HasColumnName("قرارات وتعماميم");

                    b.Property<int?>("متأخرة")
                        .HasColumnType("int")
                        .HasColumnName(" متأخرة");

                    b.Property<int?>("مستلمة")
                        .HasColumnType("int")
                        .HasColumnName(" مستلمة");

                    b.Property<int?>("مسددة")
                        .HasColumnType("int");

                    b.ToTable("VwGetEmployeeAllTransactionCounts");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VwOrganizationsToReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPathEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vw_OrganizationsToReferral");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.VwTransactionInfo", b =>
                {
                    b.Property<string>("ActionId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ActionID");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IncomingLetterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SSN");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("TransactionID");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VwTransactionInfos");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowFilter", b =>
                {
                    b.Property<int>("WorkFlowFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkFlowProcessId")
                        .HasColumnType("int");

                    b.HasKey("WorkFlowFilterId");

                    b.HasIndex(new[] { "WorkFlowProcessId" }, "IX_WorkFlowFilter_WorkFlowProcessId");

                    b.ToTable("WorkFlowFilter");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowFilterEnum", b =>
                {
                    b.Property<int>("WorkFlowFilterEnumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkFlowFilterEnumId");

                    b.ToTable("WorkFlowFilterEnum");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowProcess", b =>
                {
                    b.Property<int>("WorkFlowProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DiagramXml")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DiagramXML");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsImplementHickal")
                        .HasColumnType("bit");

                    b.Property<int>("ToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("WorkFlowProcessId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_WorkFlowProcess_CreatedBy");

                    b.HasIndex(new[] { "FromOrganizationId" }, "IX_WorkFlowProcess_FromOrganizationId");

                    b.HasIndex(new[] { "ToOrganizationId" }, "IX_WorkFlowProcess_ToOrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_WorkFlowProcess_UpdatedBy");

                    b.ToTable("WorkFlowProcess");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowProcessAction", b =>
                {
                    b.Property<int>("WorkFlowProcessActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFlowProcessActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFlowProcessActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFlowProcessActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkFlowProcessActionStep")
                        .HasColumnType("int");

                    b.HasKey("WorkFlowProcessActionId");

                    b.ToTable("WorkFlowProcessAction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowTransition", b =>
                {
                    b.Property<int>("WorkFlowTransitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("WorkFlowProcessActionId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkFlowProcessId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowTransitionOrder")
                        .HasColumnType("int");

                    b.HasKey("WorkFlowTransitionId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_WorkFlowTransition_CreatedBy");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_WorkFlowTransition_OrganizationId");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_WorkFlowTransition_UpdatedBy");

                    b.HasIndex(new[] { "WorkFlowProcessActionId" }, "IX_WorkFlowTransition_WorkFlowProcessActionId");

                    b.HasIndex(new[] { "WorkFlowProcessId" }, "IX_WorkFlowTransition_WorkFlowProcessId");

                    b.ToTable("WorkFlowTransition");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkPlace", b =>
                {
                    b.Property<int>("WorkPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkPlaceNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkPlaceNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkPlaceNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkPlaceId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_WorkPlaces_CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_WorkPlaces_UpdatedBy");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MOMComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MinuteOfMeetingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MinuteOfMeetingId");

                    b.ToTable("MOMComments", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApproveManual")
                        .HasColumnType("bit");

                    b.Property<bool>("Colsed")
                        .HasColumnType("bit");

                    b.Property<int?>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CommitteId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("MeetingFromTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("MeetingToTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MemberConfirmation")
                        .HasColumnType("bit");

                    b.Property<bool>("PermitedToEnterMeeting")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("ReminderBeforeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("Repated")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Meetings", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Attended")
                        .HasColumnType("bit");

                    b.Property<int>("AttendeeId")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmeAttendance")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SendingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingAttendee", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingComment", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingCoordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Attended")
                        .HasColumnType("bit");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmeAttendance")
                        .HasColumnType("bit");

                    b.Property<int>("CoordinatorId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("bit");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SendingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingCoordinators", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingHeaderAndFooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("HeaderAndFooterType")
                        .HasColumnType("int");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeetingHeaderAndFooters", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MeetingProjects", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TopicAcualEndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TopicAcualStartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TopicDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TopicFromDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TopicPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicState")
                        .HasColumnType("int");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TopicToDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TopicType")
                        .HasColumnType("int");

                    b.Property<int>("TopicTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingTopics", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingURl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("OnlineUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingURls", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.Meeting_Meeting_HeaderAndFooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HeaderAndFooterId")
                        .HasColumnType("int");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeaderAndFooterId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Meeting_Meeting_HeaderAndFooters");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Colsed")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FromTopic")
                        .HasColumnType("bit");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MinutesOfMeetings", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeetingTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MeetingTopicId")
                        .HasColumnType("int");

                    b.Property<int>("MinuteOfMeetingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingTopicId");

                    b.HasIndex("MinuteOfMeetingId");

                    b.ToTable("MinuteOfMeetingTopics", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProjectNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Projects", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.TopicComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicComments", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.TopicPauseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ContinueDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("PauseDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicPauseDates", "Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Views.Vm_Permissions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Vm_Permissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Views.Vw_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentTypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentTypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("FromRelatedTransaction")
                        .HasColumnType("bit");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("LFEntryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnazationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnazationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgnazationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalAttachmentTypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAttachmentTypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAttachmentTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int>("TransactionAttachmentId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("attachmentsViews");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Views.Vw_Count", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CNT")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("COUNTS");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Views.Vw_TransactionBoxes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FollowUPFinishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCC")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsShowAllTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferrerTransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("archieveDate")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("createdOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("hasCorrespondence")
                        .HasColumnType("int");

                    b.Property<string>("secretSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("transactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("transactionTypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionTypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ViewTransactionsView");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Views.Vw_TransactionBoxes_Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionDocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionLetterCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionPhysicalCount")
                        .HasColumnType("int");

                    b.Property<int?>("ConfidentialityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ConfidentialityLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidentialityLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondingUserNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserRoleOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserRoleOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserRoleOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectedToOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExecutionPeriod")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FollowUPFinishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("FromOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromUserNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportanceLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ImportanceLevelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportanceLevelNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IncomingLetterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncomingOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("IndivnidualsCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsCC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("IsLate")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("IsRejected")
                        .HasColumnType("int");

                    b.Property<bool>("IsShowAllTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LetterCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RecipientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientStatusNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedTransactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredActionId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredActionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToOrganizatioIsOuterOrganization")
                        .HasColumnType("bit");

                    b.Property<string>("ToOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserFullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TransactionActionCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionActionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionActionRecipientId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("archieveDate")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("createdOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("hasCorrespondence")
                        .HasColumnType("int");

                    b.Property<string>("incomingOrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("incomingOrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("incomingOrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("secretSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("transactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("transactionTypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionTypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionTypeNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vw_TransactionBoxes_Inbox");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Views.Vw_UserToReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationByMail")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationBySMS")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfileImageFileId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vw_UsersToReferral");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.AttachmentComment", b =>
                {
                    b.Property<int>("AttachmentCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AttachmentCommentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("AttachmentComments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.AttachmentUser", b =>
                {
                    b.Property<int>("AttachmentUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommiteeAttachmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentUserId");

                    b.HasIndex("CommiteeAttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AttachmentUsers", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CategoryId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("Categories", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("Comments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommitePermission", b =>
                {
                    b.Property<int>("CommitePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommitePermissionNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CommitePermissionNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CommitePermissionNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PermissionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("URL")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("CommitePermissionId");

                    b.HasIndex("PermissionCategoryId");

                    b.ToTable("CommitePermissions", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Commitee", b =>
                {
                    b.Property<int>("CommiteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CurrenHeadUnitId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CurrentStatusDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CurrentStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentStatusReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentLinkId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableDecisions")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableTransactions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecrete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCommiteeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommiteeTypeId");

                    b.HasIndex("CurrenHeadUnitId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("CurrentStatusReasonId");

                    b.HasIndex("DepartmentLinkId");

                    b.HasIndex("ParentCommiteeId");

                    b.ToTable("Commitees", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeLocalization", b =>
                {
                    b.Property<int>("CommiteeLocalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommiteeLocalizationAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommiteeLocalizationEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeLocalizationId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CommiteeLocalizations", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteePermissionCategory", b =>
                {
                    b.Property<int>("CommiteePermissionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsEmployeeCategory")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("PermissionCategoryNameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PermissionCategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PermissionCategoryNameFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommiteePermissionCategoryId");

                    b.ToTable("CommiteePermissionCategories", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeRolePermission", b =>
                {
                    b.Property<int>("CommiteeRolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeRolePermissionId");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("CommiteeRolePermissions", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", b =>
                {
                    b.Property<int>("CommiteeAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUsers")
                        .HasColumnType("bit");

                    b.Property<int>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeAttachmentId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CommiteeSavedAttachments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeTask", b =>
                {
                    b.Property<int>("CommiteeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComiteeTaskCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteePermissionCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CompleteDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<int>("MainAssinedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeTaskId");

                    b.HasIndex("ComiteeTaskCategoryId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CommiteePermissionCategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("MainAssinedUserId");

                    b.ToTable("CommiteeTasks", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeType", b =>
                {
                    b.Property<int>("CommiteeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommiteeTypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommiteeTypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommiteeTypeId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CommiteeTypes", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeUsersPermission", b =>
                {
                    b.Property<int>("Commitee_CommiteePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Commitee_CommiteePermissionId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("CommiteeUsersPermission", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeUsersRole", b =>
                {
                    b.Property<int>("CommiteeUsersRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CommiteeMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Delegated")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("EnableUntil")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommiteeUsersRoleId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CommiteeMemberId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("CommiteeUsersRoles", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CurrentStatus", b =>
                {
                    b.Property<int>("CurrentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrentStatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CurrentStatusId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CurrentStatus", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CurrentStatusReason", b =>
                {
                    b.Property<int>("CurrentStatusReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrentStatusReasonNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStatusReasonNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CurrentStatusReasonId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("CurrentStatusReasons", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SavedAttachment", b =>
                {
                    b.Property<int>("SavedAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LFEntryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalAttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("SavedAttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("SavedAttachments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingTopicId")
                        .HasColumnType("int");

                    b.Property<bool>("Multi")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SurveyId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("MeetingTopicId");

                    b.ToTable("Surveys", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAnswer", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAnswers", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAnswerUser", b =>
                {
                    b.Property<int>("SurveyAnswerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAnswerUserId");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyAnswerUsers", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAttachment", b =>
                {
                    b.Property<int>("SurveyAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAttachments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyComment", b =>
                {
                    b.Property<int>("SurveyCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SurveyCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyComments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyUser", b =>
                {
                    b.Property<int>("SurveyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SurveyUserId");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyUsers", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.TaskComment", b =>
                {
                    b.Property<int>("TaskCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TaskCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedByRoleId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments", "Committe");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.ValidityPeriod", b =>
                {
                    b.Property<int>("ValidityPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommiteeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PeriodState")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ValidityPeriodFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidityPeriodTo")
                        .HasColumnType("datetime2");

                    b.HasKey("ValidityPeriodId");

                    b.HasIndex("CommiteeId");

                    b.HasIndex("CreatedByRoleId");

                    b.ToTable("ValidityPeriods", "Committe");
                });

            modelBuilder.Entity("CommiteeSavedAttachmentSavedAttachment", b =>
                {
                    b.Property<int>("AttachmentsSavedAttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CommiteeSavedAttachmentsCommiteeAttachmentId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsSavedAttachmentId", "CommiteeSavedAttachmentsCommiteeAttachmentId");

                    b.HasIndex("CommiteeSavedAttachmentsCommiteeAttachmentId");

                    b.ToTable("CommiteeSavedAttachmentSavedAttachment");
                });

            modelBuilder.Entity("Models.ProjectionModels.TransactionByTypeReportDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypeEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypeFn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionByTypeReportDTO");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.UpdateTaskLogAssistantUser", b =>
                {
                    b.HasBaseType("CommiteeAndMeetings.DAL.CommiteeDomains.UpdateTaskLog");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssistantUserId")
                        .HasColumnType("int");

                    b.ToTable("UpdateTaskLog", "Committe");

                    b.HasDiscriminator().HasValue("UpdateTaskLogAssistantUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.UpdateTaskLogMainAssignedUser", b =>
                {
                    b.HasBaseType("CommiteeAndMeetings.DAL.CommiteeDomains.UpdateTaskLog");

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsShared")
                        .HasColumnType("bit");

                    b.Property<int>("MainAssignedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UpdateTaskLog", "Committe");

                    b.HasDiscriminator().HasValue("UpdateTaskLogMainAssignedUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.ComiteeTaskCategory", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeMember", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("Members")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commitee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeRole", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeTaskMultiMission", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeTask", "CommiteeTask")
                        .WithMany("MultiMission")
                        .HasForeignKey("CommiteeTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CommiteeTask");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommitteeNotification", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany()
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", "CommiteeSavedAttachment")
                        .WithMany()
                        .HasForeignKey("CommiteeSavedAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeTask", "CommiteeTask")
                        .WithMany()
                        .HasForeignKey("CommiteeTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", "MeetingTopic")
                        .WithMany()
                        .HasForeignKey("MeetingTopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeeting", "MinuteOfMeeting")
                        .WithMany()
                        .HasForeignKey("MinuteOfMeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Comment");

                    b.Navigation("Commitee");

                    b.Navigation("CommiteeSavedAttachment");

                    b.Navigation("CommiteeTask");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Meeting");

                    b.Navigation("MeetingTopic");

                    b.Navigation("MinuteOfMeeting");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommitteeTaskAttachment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.SavedAttachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeTask", "CommiteeTask")
                        .WithMany("TaskAttachments")
                        .HasForeignKey("CommiteeTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("CommiteeTask");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.UpdateTaskLog", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.UserTask", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeTask", "CommiteeTask")
                        .WithMany("AssistantUsers")
                        .HasForeignKey("CommiteeTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommiteeTask");

                    b.Navigation("CreatedByRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Action", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RequiredAction", "DefaultCcrequiredAction")
                        .WithMany("ActionDefaultCcrequiredActions")
                        .HasForeignKey("DefaultCcrequiredActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RequiredAction", "DefaultToRequiredAction")
                        .WithMany("ActionDefaultToRequiredActions")
                        .HasForeignKey("DefaultToRequiredActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultCcrequiredAction");

                    b.Navigation("DefaultToRequiredAction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ActionReferralMode", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionType", "TransactionType")
                        .WithMany("ActionReferralModes")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ActionRequiredAction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ActionRequiredActionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RequiredAction", "RequiredAction")
                        .WithMany("ActionRequiredActions")
                        .HasForeignKey("RequiredActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("ActionRequiredActionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("RequiredAction");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AllowedCountry", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Country", "Country")
                        .WithMany("AllowedCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Annotation", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.AnnotationType", "AnnotationType")
                        .WithMany("Annotations")
                        .HasForeignKey("AnnotationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("Annotations")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("AnnotationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("AnnotationDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "ReferrerTransactionAction")
                        .WithMany("Annotations")
                        .HasForeignKey("ReferrerTransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "ReferrerTransactionActionRecipient")
                        .WithMany("Annotations")
                        .HasForeignKey("ReferrerTransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "ReferrerTransaction")
                        .WithMany("Annotations")
                        .HasForeignKey("ReferrerTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Signature", "Signature")
                        .WithMany("Annotations")
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("AnnotationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AnnotationType");

                    b.Navigation("Attachment");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("ReferrerTransaction");

                    b.Navigation("ReferrerTransactionAction");

                    b.Navigation("ReferrerTransactionActionRecipient");

                    b.Navigation("Signature");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AnnotationSecurity", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Annotation", "Annotation")
                        .WithMany("AnnotationSecurities")
                        .HasForeignKey("AnnotationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("AnnotationSecurities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Annotation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AssignmentComment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "AssignmentTransaction")
                        .WithMany("AssignmentComments")
                        .HasForeignKey("AssignmentTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("AssignmentComments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignmentTransaction");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Attachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("AttachmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.PhysicalAttachmentType", "PhysicalAttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("PhysicalAttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "ReferenceAttachment")
                        .WithMany("InverseReferenceAttachment")
                        .HasForeignKey("ReferenceAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("AttachmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AttachmentType");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("PhysicalAttachmentType");

                    b.Navigation("ReferenceAttachment");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentTag", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("AttachmentTags")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("AttachmentTags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Tag", "Tag")
                        .WithMany("AttachmentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentVersion", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("AttachmentVersions")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("AttachmentVersionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("AttachmentVersionDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("AttachmentVersionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatMessage", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("ChatMessages")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.ChatRoom", "ChatRoom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ChatMessageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("ChatMessageDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("ChatRoom");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatMessageSeen", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.ChatMessage", "ChatMessage")
                        .WithMany("ChatMessageSeens")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ChatMessageSeens")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatMessage");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatRoom", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ChatRooms")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TicketClassification", "TicketClassification")
                        .WithMany("ChatRooms")
                        .HasForeignKey("TicketClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("ChatRooms")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TicketClassification");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatRoomUser", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.ChatRoom", "ChatRoom")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ChatRoomUserCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("ChatRoomUserDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("ChatRoomUserUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Classification", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ClassificationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Classification", "ParentClassification")
                        .WithMany("InverseParentClassification")
                        .HasForeignKey("ParentClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("ClassificationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ParentClassification");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.CommonGroup", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("CommonGroupCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("CommonGroupDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("CommonGroupUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.CommonGroupMember", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.CommonGroup", "CommonGroup")
                        .WithMany("CommonGroupMembers")
                        .HasForeignKey("CommonGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("CommonGroupMemberCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("CommonGroupMembers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("CommonGroupMemberUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CommonGroup");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Delegation", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Action", "Action")
                        .WithMany("Delegations")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("DelegationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("DelegationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Action");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DelegationReceipient", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CorrespondentUser")
                        .WithMany("DelegationReceipientCorrespondentUsers")
                        .HasForeignKey("CorrespondentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Delegation", "Delegation")
                        .WithMany("DelegationReceipients")
                        .HasForeignKey("DelegationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "DirectedToOrganization")
                        .WithMany("DelegationReceipients")
                        .HasForeignKey("DirectedToOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DirectedToUser")
                        .WithMany("DelegationReceipientDirectedToUsers")
                        .HasForeignKey("DirectedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RequiredAction", "RequiredAction")
                        .WithMany("DelegationReceipients")
                        .HasForeignKey("RequiredActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CorrespondentUser");

                    b.Navigation("Delegation");

                    b.Navigation("DirectedToOrganization");

                    b.Navigation("DirectedToUser");

                    b.Navigation("RequiredAction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliveryCorrespondentTransaction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("DeliveryCorrespondentTransactions")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("DeliveryCorrespondentTransactionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("DeliveryCorrespondentTransactions")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("DeliveryCorrespondentTransactionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "WhoIsEmpSignNavigation")
                        .WithMany("DeliveryCorrespondentTransactionWhoIsEmpSignNavigations")
                        .HasForeignKey("WhoIsEmpSign")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("WhoIsEmpSignNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheet", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CorrespondentUser")
                        .WithMany("DeliverySheetCorrespondentUsers")
                        .HasForeignKey("CorrespondentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("DeliverySheetCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.DeliveryStatus", "DeliverySheetStatus")
                        .WithMany("DeliverySheets")
                        .HasForeignKey("DeliverySheetStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("DeliverySheetUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CorrespondentUser");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeliverySheetStatus");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheetAttachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("DeliverySheetAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("DeliverySheetAttachmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.DeliverySheet", "DeliverySheet")
                        .WithMany("DeliverySheetAttachments")
                        .HasForeignKey("DeliverySheetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("DeliverySheetAttachmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeliverySheet");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheetItem", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.DeliverySheet", "DeliverySheet")
                        .WithMany("DeliverySheetItems")
                        .HasForeignKey("DeliverySheetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.DeliveryStatus", "DeliveryStatus")
                        .WithMany("DeliverySheetItems")
                        .HasForeignKey("DeliveryStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.DeliveryType", "DeliveryType")
                        .WithMany("DeliverySheetItems")
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("DeliverySheetItems")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("DeliverySheetItems")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeliverySheet");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("DeliveryType");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ECMArchiving", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("Ecmarchivings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("Ecmarchivings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.EcmarchivingPermission", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.ECMArchiving", "Ecmarchiving")
                        .WithMany("EcmarchivingPermissions")
                        .HasForeignKey("EcmarchivingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Permission", "Permission")
                        .WithMany("EcmarchivingPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ecmarchiving");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Ecmtemplate", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("Ecmtemplates")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("Ecmtemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ExternalOrgnaiztionStatus", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("ExternalOrgnaiztionStatuses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ExternalUser", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("ExternalUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FavoriteList", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "FavoriteOrganization")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("FavoriteOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "FavoriteUser")
                        .WithMany("FavoriteListFavoriteUsers")
                        .HasForeignKey("FavoriteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("FavoriteListUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FavoriteOrganization");

                    b.Navigation("FavoriteUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUp", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "ChangeStatusByUser")
                        .WithMany("FollowUpChangeStatusByUsers")
                        .HasForeignKey("ChangeStatusByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("FollowUpCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("FollowUpDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUpStatusType", "FollowUpStatusType")
                        .WithMany("FollowUps")
                        .HasForeignKey("FollowUpStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("FollowUps")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "TransactionAction")
                        .WithMany("FollowUps")
                        .HasForeignKey("TransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("FollowUps")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("FollowUps")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("FollowUpUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChangeStatusByUser");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("FollowUpStatusType");

                    b.Navigation("Organization");

                    b.Navigation("Transaction");

                    b.Navigation("TransactionAction");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpDateModified", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUp", "FollowUp")
                        .WithMany("FollowUpDateModifieds")
                        .HasForeignKey("FollowUpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowUp");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatement", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUp", "FollowUp")
                        .WithMany("FollowUpStatements")
                        .HasForeignKey("FollowUpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUpMessagingType", "FollowUpMessagingType")
                        .WithMany("FollowUpStatements")
                        .HasForeignKey("FollowUpMessagingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUpStatementType", "FollowUpStatementType")
                        .WithMany("FollowUpStatements")
                        .HasForeignKey("FollowUpStatementTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("FollowUpStatements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowUp");

                    b.Navigation("FollowUpMessagingType");

                    b.Navigation("FollowUpStatementType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatus", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedBy")
                        .WithMany("FollowUpStatuses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUpStatusType", "FollowStatusType")
                        .WithMany("FollowUpStatuses")
                        .HasForeignKey("FollowStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.FollowUp", "FollowUp")
                        .WithMany("FollowUpStatuses")
                        .HasForeignKey("FollowUpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("FollowStatusType");

                    b.Navigation("FollowUp");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Gender", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("Genders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.HangFireJobScheduling", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("HangFireJobSchedulings")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ImportanceLevel", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ImportanceLevelCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("ImportanceLevelUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.IncomingType", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("IncomingTypeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("IncomingTypeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.IndividualRelationship", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("IndividualRelationshipCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("IndividualRelationshipUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.JobParameter", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Job", "Job")
                        .WithMany("JobParameters")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.JobTitle", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("JobTitleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("JobTitleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.LetterTemplate", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("LetterTemplateCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("LetterTemplateUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.LetterTemplateOrganization", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("LetterTemplateOrganizationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.LetterTemplate", "LetterTemplate")
                        .WithMany("LetterTemplateOrganizations")
                        .HasForeignKey("LetterTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("LetterTemplateOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("LetterTemplateOrganizationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("LetterTemplate");

                    b.Navigation("Organization");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Localization", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("LocalizationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("LocalizationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarException", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.UserRole", "UserRole")
                        .WithMany("MasarExceptions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarSystemIntegratedUser", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MasarSystemIntegrated", "Module")
                        .WithMany("MasarSystemIntegratedUsers")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("MasarSystemIntegratedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedRelatedTransaction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", "MigratedTransaction")
                        .WithMany("MigratedRelatedTransactionMigratedTransactions")
                        .HasForeignKey("MigratedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", "RelatedMigratedTransaction")
                        .WithMany("MigratedRelatedTransactionRelatedMigratedTransactions")
                        .HasForeignKey("RelatedMigratedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MigratedTransaction");

                    b.Navigation("RelatedMigratedTransaction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionAction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", "MigratedTransaction")
                        .WithMany("MigratedTransactionActions")
                        .HasForeignKey("MigratedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MigratedTransaction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionActionRecipient", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MigratedTransactionAction", "MigratedTransactionAction")
                        .WithMany("MigratedTransactionActionRecipients")
                        .HasForeignKey("MigratedTransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MigratedTransactionAction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionAttachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", "MigratedTransaction")
                        .WithMany("MigratedTransactionAttachments")
                        .HasForeignKey("MigratedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MigratedTransaction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Nationality", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("NationalityCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("NationalityUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Notification", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("NotificationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DismissedByNavigation")
                        .WithMany("NotificationDismissedByNavigations")
                        .HasForeignKey("DismissedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "TransactionAction")
                        .WithMany("Notifications")
                        .HasForeignKey("TransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("Notifications")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("Notifications")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("NotificationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DismissedByNavigation");

                    b.Navigation("NotificationType");

                    b.Navigation("Organization");

                    b.Navigation("Transaction");

                    b.Navigation("TransactionAction");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OfficeTempleteOrganization", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.OfficeTemplete", "OfficeTemplete")
                        .WithMany("OfficeTempleteOrganizations")
                        .HasForeignKey("OfficeTempleteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("OfficeTempleteOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfficeTemplete");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Organization", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "AdminOrganization")
                        .WithMany("InverseAdminOrganization")
                        .HasForeignKey("AdminOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "FollowUpOrganization")
                        .WithMany("InverseFollowUpOrganization")
                        .HasForeignKey("FollowUpOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "ParentOrganization")
                        .WithMany("InverseParentOrganization")
                        .HasForeignKey("ParentOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AdminOrganization");

                    b.Navigation("FollowUpOrganization");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OrganizationGroup", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("OrganizationGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OrganizationGroupMember", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.OrganizationGroup", "OrganizationGroup")
                        .WithMany("OrganizationGroupMembers")
                        .HasForeignKey("OrganizationGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("OrganizationGroupMembers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationGroup");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Permission", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.PermissionCategory", "PermissionCategory")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionCategory");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.PhysicalAttachmentType", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("PhysicalAttachmentTypeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("PhysicalAttachmentTypeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RelatedTransaction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", "ChildOldTransaction")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("ChildOldTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "ChildTransaction")
                        .WithMany("RelatedTransactionChildTransactions")
                        .HasForeignKey("ChildTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("RelatedTransactionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "ParentTransaction")
                        .WithMany("RelatedTransactionParentTransactions")
                        .HasForeignKey("ParentTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionRelationship", "TransactionRelationship")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("TransactionRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionSource", "TransactionSource")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("TransactionSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("RelatedTransactionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChildOldTransaction");

                    b.Navigation("ChildTransaction");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ParentTransaction");

                    b.Navigation("TransactionRelationship");

                    b.Navigation("TransactionSource");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ReportRequest", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("ReportRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RequiredAction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("RequiredActionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("RequiredActionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Role", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("RoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("RoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RolePermission", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("RolePermissionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("RolePermissionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Search", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("SearchCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.UserRole", "CreatedByUserRole")
                        .WithMany("Searches")
                        .HasForeignKey("CreatedByUserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("SearchUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("CreatedByUserRole");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Signature", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.AnnotationType", "AnnotationType")
                        .WithMany("Signatures")
                        .HasForeignKey("AnnotationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("Signatures")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("SignatureUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("SignatureUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AnnotationType");

                    b.Navigation("Organization");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.State", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Job", "Job")
                        .WithMany("States")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.SystemSetting", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.SystemSettingCategory", "SystemSettingCategory")
                        .WithMany("SystemSettings")
                        .HasForeignKey("SystemSettingCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SystemSettingCategory");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Tag", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TagCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TagUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Transaction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Classification", "Classification")
                        .WithMany("Transactions")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.ConfidentialityLevel", "ConfidentialityLevel")
                        .WithMany("Transactions")
                        .HasForeignKey("ConfidentialityLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("TransactionDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.ImportanceLevel", "ImportanceLevel")
                        .WithMany("Transactions")
                        .HasForeignKey("ImportanceLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "IncomingOrganization")
                        .WithMany("Transactions")
                        .HasForeignKey("IncomingOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.IncomingType", "IncomingType")
                        .WithMany("Transactions")
                        .HasForeignKey("IncomingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionBasisType", "TransactionBasisType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionBasisTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Classification");

                    b.Navigation("ConfidentialityLevel");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("ImportanceLevel");

                    b.Navigation("IncomingOrganization");

                    b.Navigation("IncomingType");

                    b.Navigation("TransactionBasisType");

                    b.Navigation("TransactionType");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAction", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionActionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.UserRole", "CreatedByUserRole")
                        .WithMany("TransactionActions")
                        .HasForeignKey("CreatedByUserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "DirectedFromOrganization")
                        .WithMany("TransactionActions")
                        .HasForeignKey("DirectedFromOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DirectedFromUser")
                        .WithMany("TransactionActionDirectedFromUsers")
                        .HasForeignKey("DirectedFromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "ReferrerTransactionAction")
                        .WithMany("InverseReferrerTransactionAction")
                        .HasForeignKey("ReferrerTransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "ReferrerTransactionActionRecipient")
                        .WithMany("TransactionActions")
                        .HasForeignKey("ReferrerTransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransactionActions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionActionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("CreatedByUserRole");

                    b.Navigation("DirectedFromOrganization");

                    b.Navigation("DirectedFromUser");

                    b.Navigation("ReferrerTransactionAction");

                    b.Navigation("ReferrerTransactionActionRecipient");

                    b.Navigation("Transaction");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionAttachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "TransactionAction")
                        .WithMany("TransactionActionAttachments")
                        .HasForeignKey("TransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAttachment", "TransactionAttachment")
                        .WithMany("TransactionActionAttachments")
                        .HasForeignKey("TransactionAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransactionAction");

                    b.Navigation("TransactionAttachment");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CorrespondentUser")
                        .WithMany("TransactionActionRecipientCorrespondentUsers")
                        .HasForeignKey("CorrespondentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionActionRecipientCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "DirectedToOrganization")
                        .WithMany("TransactionActionRecipients")
                        .HasForeignKey("DirectedToOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DirectedToUser")
                        .WithMany("TransactionActionRecipientDirectedToUsers")
                        .HasForeignKey("DirectedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "RecipientStatusChangedByNavigation")
                        .WithMany("TransactionActionRecipientRecipientStatusChangedByNavigations")
                        .HasForeignKey("RecipientStatusChangedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RecipientStatus", "RecipientStatus")
                        .WithMany("TransactionActionRecipients")
                        .HasForeignKey("RecipientStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RequiredAction", "RequiredAction")
                        .WithMany("TransactionActionRecipients")
                        .HasForeignKey("RequiredActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "TransactionAction")
                        .WithMany("TransactionActionRecipients")
                        .HasForeignKey("TransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionActionRecipientUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CorrespondentUser");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DirectedToOrganization");

                    b.Navigation("DirectedToUser");

                    b.Navigation("RecipientStatus");

                    b.Navigation("RecipientStatusChangedByNavigation");

                    b.Navigation("RequiredAction");

                    b.Navigation("TransactionAction");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipientAttachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "AttachmentStatusChangedByNavigation")
                        .WithMany("TransactionActionRecipientAttachmentAttachmentStatusChangedByNavigations")
                        .HasForeignKey("AttachmentStatusChangedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.AttachmentStatus", "AttachmentStatus")
                        .WithMany("TransactionActionRecipientAttachments")
                        .HasForeignKey("AttachmentStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionActionRecipientAttachmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("TransactionActionRecipientAttachments")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAttachment", "TransactionAttachment")
                        .WithMany("TransactionActionRecipientAttachments")
                        .HasForeignKey("TransactionAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionActionRecipientAttachmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AttachmentStatus");

                    b.Navigation("AttachmentStatusChangedByNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("TransactionAttachment");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipientStatus", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionActionRecipientStatuses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RecipientStatus", "RecipientStatus")
                        .WithMany("TransactionActionRecipientStatuses")
                        .HasForeignKey("RecipientStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("TransactionActionRecipientStatuses")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.UserRole", "UserRole")
                        .WithMany("TransactionActionRecipientStatuses")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("RecipientStatus");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipientUpdateStatus", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionActionRecipientUpdateStatuses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RecipientStatus", "CurrentRecipientStatus")
                        .WithMany("TransactionActionRecipientUpdateStatusCurrentRecipientStatuses")
                        .HasForeignKey("CurrentRecipientStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("TransactionActionRecipientUpdateStatuses")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.RecipientStatus", "UpdateRecipientStatus")
                        .WithMany("TransactionActionRecipientUpdateStatusUpdateRecipientStatuses")
                        .HasForeignKey("UpdateRecipientStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("CurrentRecipientStatus");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("UpdateRecipientStatus");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAttachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Attachment", "Attachment")
                        .WithMany("TransactionAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionAttachmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "DeletedByNavigation")
                        .WithMany("TransactionAttachmentDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransactionAttachments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionAttachmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.UserRole", "UserRole")
                        .WithMany("TransactionAttachments")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Transaction");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAttachmentIndex", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionAttachmentIndexCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAttachment", "TransactionAttachment")
                        .WithMany("TransactionAttachmentIndices")
                        .HasForeignKey("TransactionAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransactionAttachmentIndices")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionAttachmentIndexUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Transaction");

                    b.Navigation("TransactionAttachment");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionDetailLog", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "TransactionAction")
                        .WithMany("TransactionDetailLogs")
                        .HasForeignKey("TransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecipient")
                        .WithMany("TransactionDetailLogs")
                        .HasForeignKey("TransactionActionRecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransactionDetailLogs")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.UserRole", "UserRole")
                        .WithMany("TransactionDetailLogs")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("TransactionAction");

                    b.Navigation("TransactionActionRecipient");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionIndividual", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionIndividualCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.IndividualRelationship", "IndividualRelationship")
                        .WithMany("TransactionIndividuals")
                        .HasForeignKey("IndividualRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransactionIndividuals")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionIndividualUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("TransactionIndividualUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("IndividualRelationship");

                    b.Navigation("Transaction");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionRelationship", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionRelationshipCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionRelationshipUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionSubject", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionSubjectCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionSubjectUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("TransactionSubjectUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionTag", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionTags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Tag", "Tag")
                        .WithMany("TransactionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransactionTags")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Tag");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionTypeClassification", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Classification", "Classification")
                        .WithMany("TransactionTypeClassifications")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionType", "TransactionType")
                        .WithMany("TransactionTypeClassifications")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Classification");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionTypeSerialAdjustment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionTypeSerialAdjustmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionType", "TransactionType")
                        .WithMany("TransactionTypeSerialAdjustments")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionTypeSerialAdjustmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TransactionType");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionWorkFlowProcess", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("TransactionWorkFlowProcessCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionAction", "TransactionAction")
                        .WithMany("TransactionWorkFlowProcesses")
                        .HasForeignKey("TransactionActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", "TransactionActionRecepient")
                        .WithMany("TransactionWorkFlowProcesses")
                        .HasForeignKey("TransactionActionRecepientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("TransactionWorkFlowProcessUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.WorkFlowProcess", "WorkFlowProcess")
                        .WithMany("TransactionWorkFlowProcesses")
                        .HasForeignKey("WorkFlowProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TransactionAction");

                    b.Navigation("TransactionActionRecepient");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("WorkFlowProcess");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransfaredFaxis", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Transaction", "Transaction")
                        .WithMany("TransfaredFaxes")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.User", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Nationality", "Nationality")
                        .WithMany("Users")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserCorrespondentOrganization", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("UserCorrespondentOrganizationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("UserCorrespondentOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("UserCorrespondentOrganizationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserCorrespondentOrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserJob", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserPermission", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("UserPermissionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("UserPermissions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Role", "Role")
                        .WithMany("UserPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("UserPermissionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserPermissionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserRole", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("UserRoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("UserRoles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("UserRoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserSignatureFactorAuth", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserSignatureFactorAuths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserSpecificOrganizationsAndEmployee", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("UserSpecificOrganizationsAndEmployeeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("UserSpecificOrganizationsAndEmployeeOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "SpecificOrganization")
                        .WithMany("UserSpecificOrganizationsAndEmployeeSpecificOrganizations")
                        .HasForeignKey("SpecificOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "SpecificUser")
                        .WithMany("UserSpecificOrganizationsAndEmployeeSpecificUsers")
                        .HasForeignKey("SpecificUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("UserSpecificOrganizationsAndEmployeeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserSpecificOrganizationsAndEmployeeUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("SpecificOrganization");

                    b.Navigation("SpecificUser");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserToken", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserVacation", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "StandByUser")
                        .WithMany("UserVacationStandByUsers")
                        .HasForeignKey("StandByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany("UserVacationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StandByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowFilter", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.WorkFlowProcess", "WorkFlowProcess")
                        .WithMany("WorkFlowFilters")
                        .HasForeignKey("WorkFlowProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkFlowProcess");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowProcess", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("WorkFlowProcessCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "FromOrganization")
                        .WithMany("WorkFlowProcessFromOrganizations")
                        .HasForeignKey("FromOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "ToOrganization")
                        .WithMany("WorkFlowProcessToOrganizations")
                        .HasForeignKey("ToOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("WorkFlowProcessUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("FromOrganization");

                    b.Navigation("ToOrganization");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowTransition", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("WorkFlowTransitionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "Organization")
                        .WithMany("WorkFlowTransitions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("WorkFlowTransitionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.WorkFlowProcessAction", "WorkFlowProcessAction")
                        .WithMany("WorkFlowTransitions")
                        .HasForeignKey("WorkFlowProcessActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.WorkFlowProcess", "WorkFlowProcess")
                        .WithMany("WorkFlowTransitions")
                        .HasForeignKey("WorkFlowProcessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("WorkFlowProcess");

                    b.Navigation("WorkFlowProcessAction");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkPlace", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByNavigation")
                        .WithMany("WorkPlaceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "UpdatedByNavigation")
                        .WithMany("WorkPlaceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MOMComment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeeting", "MinuteOfMeeting")
                        .WithMany("MOMComment")
                        .HasForeignKey("MinuteOfMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("CreatedByUser");

                    b.Navigation("MinuteOfMeeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("Meetings")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Commitee");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingAttendee", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingAttendees")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attendee");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingComment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingComments")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingCoordinator", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingCoordinators")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coordinator");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingProject", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingProjects")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingTopics")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingURl", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingURls")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.Meeting_Meeting_HeaderAndFooter", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MeetingHeaderAndFooter", "HeaderAndFooter")
                        .WithMany("Meetings")
                        .HasForeignKey("HeaderAndFooterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MeetingHeaderAndFooters")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HeaderAndFooter");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeeting", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("MinutesOfMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeetingTopic", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", "MeetingTopic")
                        .WithMany()
                        .HasForeignKey("MeetingTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeeting", "MinuteOfMeeting")
                        .WithMany("Topics")
                        .HasForeignKey("MinuteOfMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeetingTopic");

                    b.Navigation("MinuteOfMeeting");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.TopicComment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", "Topic")
                        .WithMany("TopicComments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.TopicPauseDate", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", "Topic")
                        .WithMany("TopicPauseDates")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.AttachmentComment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", "Attachment")
                        .WithMany("AttachmentComments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attachment");

                    b.Navigation("Comment");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.AttachmentUser", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", "CommiteeAttachment")
                        .WithMany("AttachmentUsers")
                        .HasForeignKey("CommiteeAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommiteeAttachment");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Category", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Comment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommitePermission", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteePermissionCategory", "PermissionCategory")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PermissionCategory");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Commitee", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeType", "CommiteeType")
                        .WithMany()
                        .HasForeignKey("CommiteeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CurrenHeadUnit")
                        .WithMany()
                        .HasForeignKey("CurrenHeadUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CurrentStatus", "CurrentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CurrentStatusReason", "CurrentStatusReason")
                        .WithMany()
                        .HasForeignKey("CurrentStatusReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.Organization", "DepartmentLink")
                        .WithMany()
                        .HasForeignKey("DepartmentLinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "ParentCommitee")
                        .WithMany()
                        .HasForeignKey("ParentCommiteeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("CommiteeType");

                    b.Navigation("CurrenHeadUnit");

                    b.Navigation("CurrentStatus");

                    b.Navigation("CurrentStatusReason");

                    b.Navigation("DepartmentLink");

                    b.Navigation("ParentCommitee");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeLocalization", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeRolePermission", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommitePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("Attachments")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Commitee");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeTask", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.CommiteeDomains.ComiteeTaskCategory", "ComiteeTaskCategory")
                        .WithMany()
                        .HasForeignKey("ComiteeTaskCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("Tasks")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteePermissionCategory", null)
                        .WithMany("CommiteeTasks")
                        .HasForeignKey("CommiteePermissionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "MainAssinedUser")
                        .WithMany()
                        .HasForeignKey("MainAssinedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComiteeTaskCategory");

                    b.Navigation("Commitee");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("MainAssinedUser");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeType", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeUsersPermission", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("CommiteePermissions")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommitePermission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commitee");

                    b.Navigation("CreatedByRole");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeUsersRole", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("CommiteeRoles")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeMember", null)
                        .WithMany("CommiteeRoles")
                        .HasForeignKey("CommiteeMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commitee");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CurrentStatus", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CurrentStatusReason", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SavedAttachment", b =>
                {
                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Survey", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("Surveys")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", "Meeting")
                        .WithMany("Surveys")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", "MeetingTopic")
                        .WithMany("TopicSurveies")
                        .HasForeignKey("MeetingTopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Commitee");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Meeting");

                    b.Navigation("MeetingTopic");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAnswer", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Survey", "Survey")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByRole");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAnswerUser", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.SurveyAnswer", "SurveyAnswer")
                        .WithMany("SurveyAnswerUsers")
                        .HasForeignKey("SurveyAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyAnswer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAttachment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.SavedAttachment", "Attachment")
                        .WithMany("SurveyAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.Survey", "Survey")
                        .WithMany("Attachments")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyComment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Survey", "Survey")
                        .WithMany("Comments")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyUser", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.Survey", "Survey")
                        .WithMany("SurveyUsers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByRole");

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.TaskComment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeAndMeetings.DAL.Domains.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeTask", "Task")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("CreatedByRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.ValidityPeriod", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.Commitee", "Commitee")
                        .WithMany("ValidityPeriod")
                        .HasForeignKey("CommiteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeUsersRole", "CreatedByRole")
                        .WithMany()
                        .HasForeignKey("CreatedByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Commitee");

                    b.Navigation("CreatedByRole");
                });

            modelBuilder.Entity("CommiteeSavedAttachmentSavedAttachment", b =>
                {
                    b.HasOne("CommiteeDatabase.Models.Domains.SavedAttachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsSavedAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", null)
                        .WithMany()
                        .HasForeignKey("CommiteeSavedAttachmentsCommiteeAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeMember", b =>
                {
                    b.Navigation("CommiteeRoles");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.CommiteeDomains.CommiteeRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Action", b =>
                {
                    b.Navigation("Delegations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Annotation", b =>
                {
                    b.Navigation("AnnotationSecurities");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AnnotationType", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Attachment", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("AttachmentTags");

                    b.Navigation("AttachmentVersions");

                    b.Navigation("ChatMessages");

                    b.Navigation("DeliveryCorrespondentTransactions");

                    b.Navigation("DeliverySheetAttachments");

                    b.Navigation("InverseReferenceAttachment");

                    b.Navigation("TransactionAttachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentStatus", b =>
                {
                    b.Navigation("TransactionActionRecipientAttachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatMessage", b =>
                {
                    b.Navigation("ChatMessageSeens");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ChatRoom", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ChatRoomUsers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Classification", b =>
                {
                    b.Navigation("InverseParentClassification");

                    b.Navigation("Transactions");

                    b.Navigation("TransactionTypeClassifications");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.CommonGroup", b =>
                {
                    b.Navigation("CommonGroupMembers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ConfidentialityLevel", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Country", b =>
                {
                    b.Navigation("AllowedCountries");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Delegation", b =>
                {
                    b.Navigation("DelegationReceipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliverySheet", b =>
                {
                    b.Navigation("DeliverySheetAttachments");

                    b.Navigation("DeliverySheetItems");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliveryStatus", b =>
                {
                    b.Navigation("DeliverySheetItems");

                    b.Navigation("DeliverySheets");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.DeliveryType", b =>
                {
                    b.Navigation("DeliverySheetItems");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ECMArchiving", b =>
                {
                    b.Navigation("EcmarchivingPermissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUp", b =>
                {
                    b.Navigation("FollowUpDateModifieds");

                    b.Navigation("FollowUpStatements");

                    b.Navigation("FollowUpStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpMessagingType", b =>
                {
                    b.Navigation("FollowUpStatements");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatementType", b =>
                {
                    b.Navigation("FollowUpStatements");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.FollowUpStatusType", b =>
                {
                    b.Navigation("FollowUps");

                    b.Navigation("FollowUpStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.ImportanceLevel", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.IncomingType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.IndividualRelationship", b =>
                {
                    b.Navigation("TransactionIndividuals");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Job", b =>
                {
                    b.Navigation("JobParameters");

                    b.Navigation("States");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.LetterTemplate", b =>
                {
                    b.Navigation("LetterTemplateOrganizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MasarSystemIntegrated", b =>
                {
                    b.Navigation("MasarSystemIntegratedUsers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransaction", b =>
                {
                    b.Navigation("MigratedRelatedTransactionMigratedTransactions");

                    b.Navigation("MigratedRelatedTransactionRelatedMigratedTransactions");

                    b.Navigation("MigratedTransactionActions");

                    b.Navigation("MigratedTransactionAttachments");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.MigratedTransactionAction", b =>
                {
                    b.Navigation("MigratedTransactionActionRecipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Nationality", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OfficeTemplete", b =>
                {
                    b.Navigation("OfficeTempleteOrganizations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Organization", b =>
                {
                    b.Navigation("CommonGroupMembers");

                    b.Navigation("DelegationReceipients");

                    b.Navigation("Ecmarchivings");

                    b.Navigation("Ecmtemplates");

                    b.Navigation("ExternalOrgnaiztionStatuses");

                    b.Navigation("ExternalUsers");

                    b.Navigation("FavoriteLists");

                    b.Navigation("FollowUps");

                    b.Navigation("InverseAdminOrganization");

                    b.Navigation("InverseFollowUpOrganization");

                    b.Navigation("InverseParentOrganization");

                    b.Navigation("LetterTemplateOrganizations");

                    b.Navigation("Notifications");

                    b.Navigation("OfficeTempleteOrganizations");

                    b.Navigation("OrganizationGroupMembers");

                    b.Navigation("Signatures");

                    b.Navigation("TransactionActionRecipients");

                    b.Navigation("TransactionActions");

                    b.Navigation("Transactions");

                    b.Navigation("UserCorrespondentOrganizations");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSpecificOrganizationsAndEmployeeOrganizations");

                    b.Navigation("UserSpecificOrganizationsAndEmployeeSpecificOrganizations");

                    b.Navigation("WorkFlowProcessFromOrganizations");

                    b.Navigation("WorkFlowProcessToOrganizations");

                    b.Navigation("WorkFlowTransitions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.OrganizationGroup", b =>
                {
                    b.Navigation("OrganizationGroupMembers");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Permission", b =>
                {
                    b.Navigation("EcmarchivingPermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.PermissionCategory", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.PhysicalAttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RecipientStatus", b =>
                {
                    b.Navigation("TransactionActionRecipients");

                    b.Navigation("TransactionActionRecipientStatuses");

                    b.Navigation("TransactionActionRecipientUpdateStatusCurrentRecipientStatuses");

                    b.Navigation("TransactionActionRecipientUpdateStatusUpdateRecipientStatuses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.RequiredAction", b =>
                {
                    b.Navigation("ActionDefaultCcrequiredActions");

                    b.Navigation("ActionDefaultToRequiredActions");

                    b.Navigation("ActionRequiredActions");

                    b.Navigation("DelegationReceipients");

                    b.Navigation("TransactionActionRecipients");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Signature", b =>
                {
                    b.Navigation("Annotations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.SystemSettingCategory", b =>
                {
                    b.Navigation("SystemSettings");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Tag", b =>
                {
                    b.Navigation("AttachmentTags");

                    b.Navigation("TransactionTags");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TicketClassification", b =>
                {
                    b.Navigation("ChatRooms");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.Transaction", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("AssignmentComments");

                    b.Navigation("ChatRooms");

                    b.Navigation("FollowUps");

                    b.Navigation("Notifications");

                    b.Navigation("RelatedTransactionChildTransactions");

                    b.Navigation("RelatedTransactionParentTransactions");

                    b.Navigation("TransactionActions");

                    b.Navigation("TransactionAttachmentIndices");

                    b.Navigation("TransactionAttachments");

                    b.Navigation("TransactionDetailLogs");

                    b.Navigation("TransactionIndividuals");

                    b.Navigation("TransactionTags");

                    b.Navigation("TransfaredFaxes");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAction", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("FollowUps");

                    b.Navigation("InverseReferrerTransactionAction");

                    b.Navigation("Notifications");

                    b.Navigation("TransactionActionAttachments");

                    b.Navigation("TransactionActionRecipients");

                    b.Navigation("TransactionDetailLogs");

                    b.Navigation("TransactionWorkFlowProcesses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionActionRecipient", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("DeliveryCorrespondentTransactions");

                    b.Navigation("DeliverySheetItems");

                    b.Navigation("FollowUps");

                    b.Navigation("Notifications");

                    b.Navigation("TransactionActionRecipientAttachments");

                    b.Navigation("TransactionActionRecipientStatuses");

                    b.Navigation("TransactionActionRecipientUpdateStatuses");

                    b.Navigation("TransactionActions");

                    b.Navigation("TransactionDetailLogs");

                    b.Navigation("TransactionWorkFlowProcesses");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionAttachment", b =>
                {
                    b.Navigation("TransactionActionAttachments");

                    b.Navigation("TransactionActionRecipientAttachments");

                    b.Navigation("TransactionAttachmentIndices");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionBasisType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionRelationship", b =>
                {
                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionSource", b =>
                {
                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.TransactionType", b =>
                {
                    b.Navigation("ActionReferralModes");

                    b.Navigation("Transactions");

                    b.Navigation("TransactionTypeClassifications");

                    b.Navigation("TransactionTypeSerialAdjustments");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.User", b =>
                {
                    b.Navigation("ActionRequiredActionCreatedByNavigations");

                    b.Navigation("ActionRequiredActionUpdatedByNavigations");

                    b.Navigation("AnnotationCreatedByNavigations");

                    b.Navigation("AnnotationDeletedByNavigations");

                    b.Navigation("AnnotationSecurities");

                    b.Navigation("AnnotationUpdatedByNavigations");

                    b.Navigation("AssignmentComments");

                    b.Navigation("AttachmentCreatedByNavigations");

                    b.Navigation("AttachmentTags");

                    b.Navigation("AttachmentUpdatedByNavigations");

                    b.Navigation("AttachmentVersionCreatedByNavigations");

                    b.Navigation("AttachmentVersionDeletedByNavigations");

                    b.Navigation("AttachmentVersionUpdatedByNavigations");

                    b.Navigation("ChatMessageCreatedByNavigations");

                    b.Navigation("ChatMessageDeletedByNavigations");

                    b.Navigation("ChatMessageSeens");

                    b.Navigation("ChatRooms");

                    b.Navigation("ChatRoomUserCreatedByNavigations");

                    b.Navigation("ChatRoomUserDeletedByNavigations");

                    b.Navigation("ChatRoomUserUsers");

                    b.Navigation("ClassificationCreatedByNavigations");

                    b.Navigation("ClassificationUpdatedByNavigations");

                    b.Navigation("CommonGroupCreatedByNavigations");

                    b.Navigation("CommonGroupDeletedByNavigations");

                    b.Navigation("CommonGroupMemberCreatedByNavigations");

                    b.Navigation("CommonGroupMemberUsers");

                    b.Navigation("CommonGroupUpdatedByNavigations");

                    b.Navigation("DelegationCreatedByNavigations");

                    b.Navigation("DelegationReceipientCorrespondentUsers");

                    b.Navigation("DelegationReceipientDirectedToUsers");

                    b.Navigation("DelegationUpdatedByNavigations");

                    b.Navigation("DeliveryCorrespondentTransactionCreatedByNavigations");

                    b.Navigation("DeliveryCorrespondentTransactionUpdatedByNavigations");

                    b.Navigation("DeliveryCorrespondentTransactionWhoIsEmpSignNavigations");

                    b.Navigation("DeliverySheetAttachmentCreatedByNavigations");

                    b.Navigation("DeliverySheetAttachmentUpdatedByNavigations");

                    b.Navigation("DeliverySheetCorrespondentUsers");

                    b.Navigation("DeliverySheetCreatedByNavigations");

                    b.Navigation("DeliverySheetItems");

                    b.Navigation("DeliverySheetUpdatedByNavigations");

                    b.Navigation("Ecmarchivings");

                    b.Navigation("Ecmtemplates");

                    b.Navigation("FavoriteListFavoriteUsers");

                    b.Navigation("FavoriteListUsers");

                    b.Navigation("FollowUpChangeStatusByUsers");

                    b.Navigation("FollowUpCreatedByNavigations");

                    b.Navigation("FollowUpDeletedByNavigations");

                    b.Navigation("FollowUpStatements");

                    b.Navigation("FollowUpStatuses");

                    b.Navigation("FollowUpUsers");

                    b.Navigation("Genders");

                    b.Navigation("HangFireJobSchedulings");

                    b.Navigation("ImportanceLevelCreatedByNavigations");

                    b.Navigation("ImportanceLevelUpdatedByNavigations");

                    b.Navigation("IncomingTypeCreatedByNavigations");

                    b.Navigation("IncomingTypeUpdatedByNavigations");

                    b.Navigation("IndividualRelationshipCreatedByNavigations");

                    b.Navigation("IndividualRelationshipUpdatedByNavigations");

                    b.Navigation("JobTitleCreatedByNavigations");

                    b.Navigation("JobTitleUpdatedByNavigations");

                    b.Navigation("LetterTemplateCreatedByNavigations");

                    b.Navigation("LetterTemplateOrganizationCreatedByNavigations");

                    b.Navigation("LetterTemplateOrganizationUpdatedByNavigations");

                    b.Navigation("LetterTemplateUpdatedByNavigations");

                    b.Navigation("LocalizationCreatedByNavigations");

                    b.Navigation("LocalizationUpdatedByNavigations");

                    b.Navigation("MasarSystemIntegratedUsers");

                    b.Navigation("NationalityCreatedByNavigations");

                    b.Navigation("NationalityUpdatedByNavigations");

                    b.Navigation("NotificationCreatedByNavigations");

                    b.Navigation("NotificationDismissedByNavigations");

                    b.Navigation("NotificationUpdatedByNavigations");

                    b.Navigation("NotificationUsers");

                    b.Navigation("OrganizationGroups");

                    b.Navigation("PhysicalAttachmentTypeCreatedByNavigations");

                    b.Navigation("PhysicalAttachmentTypeUpdatedByNavigations");

                    b.Navigation("RelatedTransactionCreatedByNavigations");

                    b.Navigation("RelatedTransactionUpdatedByNavigations");

                    b.Navigation("ReportRequests");

                    b.Navigation("RequiredActionCreatedByNavigations");

                    b.Navigation("RequiredActionUpdatedByNavigations");

                    b.Navigation("RoleCreatedByNavigations");

                    b.Navigation("RolePermissionCreatedByNavigations");

                    b.Navigation("RolePermissionUpdatedByNavigations");

                    b.Navigation("RoleUpdatedByNavigations");

                    b.Navigation("SearchCreatedByNavigations");

                    b.Navigation("SearchUpdatedByNavigations");

                    b.Navigation("SignatureUpdatedByNavigations");

                    b.Navigation("SignatureUsers");

                    b.Navigation("TagCreatedByNavigations");

                    b.Navigation("TagUpdatedByNavigations");

                    b.Navigation("TransactionActionCreatedByNavigations");

                    b.Navigation("TransactionActionDirectedFromUsers");

                    b.Navigation("TransactionActionRecipientAttachmentAttachmentStatusChangedByNavigations");

                    b.Navigation("TransactionActionRecipientAttachmentCreatedByNavigations");

                    b.Navigation("TransactionActionRecipientAttachmentUpdatedByNavigations");

                    b.Navigation("TransactionActionRecipientCorrespondentUsers");

                    b.Navigation("TransactionActionRecipientCreatedByNavigations");

                    b.Navigation("TransactionActionRecipientDirectedToUsers");

                    b.Navigation("TransactionActionRecipientRecipientStatusChangedByNavigations");

                    b.Navigation("TransactionActionRecipientStatuses");

                    b.Navigation("TransactionActionRecipientUpdatedByNavigations");

                    b.Navigation("TransactionActionRecipientUpdateStatuses");

                    b.Navigation("TransactionActionUpdatedByNavigations");

                    b.Navigation("TransactionAttachmentCreatedByNavigations");

                    b.Navigation("TransactionAttachmentDeletedByNavigations");

                    b.Navigation("TransactionAttachmentIndexCreatedByNavigations");

                    b.Navigation("TransactionAttachmentIndexUpdatedByNavigations");

                    b.Navigation("TransactionAttachmentUpdatedByNavigations");

                    b.Navigation("TransactionCreatedByNavigations");

                    b.Navigation("TransactionDeletedByNavigations");

                    b.Navigation("TransactionIndividualCreatedByNavigations");

                    b.Navigation("TransactionIndividualUpdatedByNavigations");

                    b.Navigation("TransactionIndividualUsers");

                    b.Navigation("TransactionRelationshipCreatedByNavigations");

                    b.Navigation("TransactionRelationshipUpdatedByNavigations");

                    b.Navigation("TransactionSubjectCreatedByNavigations");

                    b.Navigation("TransactionSubjectUpdatedByNavigations");

                    b.Navigation("TransactionSubjectUsers");

                    b.Navigation("TransactionTags");

                    b.Navigation("TransactionTypeSerialAdjustmentCreatedByNavigations");

                    b.Navigation("TransactionTypeSerialAdjustmentUpdatedByNavigations");

                    b.Navigation("TransactionUpdatedByNavigations");

                    b.Navigation("TransactionWorkFlowProcessCreatedByNavigations");

                    b.Navigation("TransactionWorkFlowProcessUpdatedByNavigations");

                    b.Navigation("UserCorrespondentOrganizationCreatedByNavigations");

                    b.Navigation("UserCorrespondentOrganizationUpdatedByNavigations");

                    b.Navigation("UserCorrespondentOrganizationUsers");

                    b.Navigation("UserJobs");

                    b.Navigation("UserPermissionCreatedByNavigations");

                    b.Navigation("UserPermissionUpdatedByNavigations");

                    b.Navigation("UserPermissionUsers");

                    b.Navigation("UserRoleCreatedByNavigations");

                    b.Navigation("UserRoleUpdatedByNavigations");

                    b.Navigation("UserRoleUsers");

                    b.Navigation("UserSignatureFactorAuths");

                    b.Navigation("UserSpecificOrganizationsAndEmployeeCreatedByNavigations");

                    b.Navigation("UserSpecificOrganizationsAndEmployeeSpecificUsers");

                    b.Navigation("UserSpecificOrganizationsAndEmployeeUpdatedByNavigations");

                    b.Navigation("UserSpecificOrganizationsAndEmployeeUsers");

                    b.Navigation("UserTokens");

                    b.Navigation("UserVacationStandByUsers");

                    b.Navigation("UserVacationUsers");

                    b.Navigation("WorkFlowProcessCreatedByNavigations");

                    b.Navigation("WorkFlowProcessUpdatedByNavigations");

                    b.Navigation("WorkFlowTransitionCreatedByNavigations");

                    b.Navigation("WorkFlowTransitionUpdatedByNavigations");

                    b.Navigation("WorkPlaceCreatedByNavigations");

                    b.Navigation("WorkPlaceUpdatedByNavigations");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.UserRole", b =>
                {
                    b.Navigation("MasarExceptions");

                    b.Navigation("Searches");

                    b.Navigation("TransactionActionRecipientStatuses");

                    b.Navigation("TransactionActions");

                    b.Navigation("TransactionAttachments");

                    b.Navigation("TransactionDetailLogs");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowProcess", b =>
                {
                    b.Navigation("TransactionWorkFlowProcesses");

                    b.Navigation("WorkFlowFilters");

                    b.Navigation("WorkFlowTransitions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.Domains.WorkFlowProcessAction", b =>
                {
                    b.Navigation("WorkFlowTransitions");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.Meeting", b =>
                {
                    b.Navigation("MeetingAttendees");

                    b.Navigation("MeetingComments");

                    b.Navigation("MeetingCoordinators");

                    b.Navigation("MeetingHeaderAndFooters");

                    b.Navigation("MeetingProjects");

                    b.Navigation("MeetingTopics");

                    b.Navigation("MeetingURls");

                    b.Navigation("MinutesOfMeetings");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingHeaderAndFooter", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MeetingTopic", b =>
                {
                    b.Navigation("TopicComments");

                    b.Navigation("TopicPauseDates");

                    b.Navigation("TopicSurveies");
                });

            modelBuilder.Entity("CommiteeAndMeetings.DAL.MeetingDomains.MinuteOfMeeting", b =>
                {
                    b.Navigation("MOMComment");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommitePermission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Commitee", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CommiteePermissions");

                    b.Navigation("CommiteeRoles");

                    b.Navigation("Meetings");

                    b.Navigation("Members");

                    b.Navigation("Surveys");

                    b.Navigation("Tasks");

                    b.Navigation("ValidityPeriod");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteePermissionCategory", b =>
                {
                    b.Navigation("CommiteeTasks");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeSavedAttachment", b =>
                {
                    b.Navigation("AttachmentComments");

                    b.Navigation("AttachmentUsers");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.CommiteeTask", b =>
                {
                    b.Navigation("AssistantUsers");

                    b.Navigation("MultiMission");

                    b.Navigation("TaskAttachments");

                    b.Navigation("TaskComments");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SavedAttachment", b =>
                {
                    b.Navigation("SurveyAttachments");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.Survey", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("SurveyAnswers");

                    b.Navigation("SurveyUsers");
                });

            modelBuilder.Entity("CommiteeDatabase.Models.Domains.SurveyAnswer", b =>
                {
                    b.Navigation("SurveyAnswerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
